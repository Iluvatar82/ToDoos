@using Core.Validation;


<div tabindex="0" class="p-1" @onclick=@(_ => HideOptions = false) @onblur=@(_ => HideOptions = true)>
    <div class="position-relative selected">@SelectedFragment</div>
    @if (!HideOptions)
    {
        <div class="position-absolute p-1 border border-1 options" style="z-index: 2; background-color: @BackgroundColor;" @onclick:stopPropagation="true" @onclick:preventDefault="true">
            @foreach (var element in Elements)
            {
                <div class="m-1 element" @onclick=@(_ => Select(@element.Text))>@element.Fragment</div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Selected { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SelectedChanged { get; set; }

    [Parameter]
    public IEnumerable<string>? SimpleElements { get; set; }

    [Parameter]
    public IEnumerable<(string Icon, string Element)>? ElementsWithIcons { get; set; }

    [Parameter]
    public bool OnlyShowIcon { get; set; } = false;

    [Parameter]
    public string BackgroundColor { get; set; } = "white";

    private RenderFragment SelectedFragment { get; set; } = @<span>&ensp;</span>;
    private bool HideOptions { get; set; } = true;
    private List<(RenderFragment Fragment, string Text)> Elements { get; set; } = new List<(RenderFragment Fragment, string Text)>();

    protected override async void OnParametersSet()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Selected))
                Selected = "bitte auswählen";

            if (SimpleElements?.Any() != true && ElementsWithIcons?.Any() != true)
                return;

            Elements = new List<(RenderFragment Fragment, string Text)>();
            SelectedFragment = GetSelectedFragment(Selected);

            if (SimpleElements?.Any() == true)
            {
                foreach (var element in SimpleElements)
                    Elements.Add(((builder) => builder.AddContent(0, element), element));
            }
            else
            {
                foreach (var element in ElementsWithIcons!)
                {
                    RenderFragment elementRenderFragment = @<span class="@element.Icon" aria-hidden="true" style="width: 24px;"></span>;
                    elementRenderFragment += @<span> @element.Element</span>;

                    Elements.Add((elementRenderFragment, element.Element));
                }
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    private RenderFragment GetSelectedFragment(string element)
    {
        try
        {
            if (SimpleElements?.Contains(element) == true)
                return @<span>element</span>;
            else
            {
                var elementWithIcon = ElementsWithIcons!.FirstOrDefault(ewi => ewi.Element == element);
                if (elementWithIcon == default)
                    return@<span>&ensp;</span>;

                RenderFragment fragment =@<span class="@elementWithIcon.Icon" aria-hidden="true" style="width: 24px;"></span>;
                if (!OnlyShowIcon)
                    fragment +=@<span> @elementWithIcon.Element</span>;

                return fragment;
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
            return @<span>element</span>;
        }
    }

    private async void Select(string element)
    {
        try
        {
            Selected = element;
            await SelectedChanged.InvokeAsync(element);

            SelectedFragment = GetSelectedFragment(Selected);
            HideOptions = true;
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }
}
