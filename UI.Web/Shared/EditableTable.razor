@using System.Linq.Expressions;
@using UI.Web.Data.Models;
@typeparam TItem

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            @foreach (var column in Columns)
            {
                <th scope="col">@column.Header</th>
            }
        </tr>
    </thead>

    <tbody>
        @{
            var currentIndex = 0;
            @foreach (var item in AllItems)
            {
                var currentItemIndex = AllItems.IndexOf(item);
                <tr class="align-middle">
                    @foreach (var column in Columns)
                    {
                        var currentColumnIndex = Columns.IndexOf(column);
                        var thisIndex = currentIndex;

                        <EditableTable_Cell InputType=@column.InputType @bind:get=@column.Accessor(item) @bind:set=@((string val) => column.Setter(item, val))></EditableTable_Cell>

                        // <td @onclick=@(() => { if (column.IsEditable) { EditingItemIndex = currentItemIndex; EditingColumnIndex = currentColumnIndex; }})>
                        //     @{
                        //         @if (EditingItemIndex == currentItemIndex && EditingColumnIndex == currentColumnIndex)
                        //         {
                        //             if (column.InputType == "text")
                        //             {
                        //                 <EditForm Model=@column.Accessor(item)>
                        //                     <DataAnnotationsValidator />

                        //                     <input type=@column.InputType @bind-value=allValues[thisIndex] class="form-control" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleSet(async () => await column.Setter(item, allValues[thisIndex]), context); }) @onblur=@(async () => await HandleSet(async () => await column.Setter(item, allValues[thisIndex]), context)) />
                        //                     <ValidationMessage For=@(() => column.PropertyExpression) />
                        //                 </EditForm>
                        //             }
                        //             else if (column.InputType == "color")
                        //             {
                        //                 <input type=@column.InputType @bind-value=allValues[thisIndex] class="w-100" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleSet(async () => await column.Setter(item, allValues[thisIndex])); }) @onblur=@(async () => await HandleSet(async () => await column.Setter(item, allValues[thisIndex]))) />
                        //             }
                        //         }
                        //         else
                        //         {
                        //             if (column.InputType == "text")
                        //             {
                        //                 <span>@column.Accessor(item)</span>
                        //             }
                        //             else if (column.InputType == "color")
                        //             {
                        //                 <input type=@column.InputType disabled @bind-value=allValues[thisIndex] class="w-100 pe-none" />
                        //             }
                        //         }

                        //         currentIndex++;
                        //     }
                        // </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<TItem> AllItems { get; set; } = new List<TItem>();

    [Parameter]
    public List<ColumnDefinition<TItem>> Columns { get; set; } = new List<ColumnDefinition<TItem>>();

    [Parameter]
    public EventCallback StateChanged { get; set; }

    private int EditingItemIndex { get; set; } = -1;
    private int EditingColumnIndex { get; set; } = -1;

    private List<string> allValues { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        foreach (var item in AllItems)
        {
            foreach (var column in Columns)
                allValues.Add(column.Accessor(item));
        }

        await base.OnParametersSetAsync();
    }

    private async Task HandleSet(Action setter, EditContext? context = null)
    {
        var valid = context?.Validate() ?? true;
        if (valid)
        {
            setter();

            EditingItemIndex = -1;
            EditingColumnIndex = -1;

            StateHasChanged();
            await StateChanged.InvokeAsync();
        }
    }
}
