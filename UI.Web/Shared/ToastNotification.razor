@using Framework.Services;
@using Framework.Services.Base;

<div class="toast fade show" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: 4000;">
    <div class="toast-header">
        <i class="fa fa-@IconCssClass mx-3" aria-hidden="true"></i>
        <strong class="me-auto">@Toast?.Title</strong>
        @if(Toast?.DisplayTime <= 0)
        {
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close" @onclick=@(() => Toast.OnRemove!.Invoke())></button>
        }
    </div>
    <div class="toast-body">
        @ToastMessage
    </div>
</div>

@code {
    [Parameter]
    public Toast? Toast { get; set; }

    private RenderFragment ToastMessage => (__builder) => __builder.AddMarkupContent(0, Toast?.Message);

    private string? IconCssClass;

    protected override void OnInitialized()
    {
        try
        {
            ShowToast();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    private void ShowToast()
    {
        BuildToastSettings();
        InvokeAsync(() => StateHasChanged());
    }

    private void BuildToastSettings()
    {
        switch (Toast!.MessageType)
        {
            case MessageType.Info:
                IconCssClass = "info";
                Toast.Title = Toast.Title ?? "Info";
                break;

            case MessageType.Warning:
                IconCssClass = "exclamation";
                Toast.Title = Toast.Title ?? "Warning";
                break;

            case MessageType.Error:
                IconCssClass = "xmark";
                Toast.Title = Toast.Title ?? "Error";
                break;

            default:
                throw new ArgumentOutOfRangeException(nameof(Toast.MessageType), Toast.MessageType, null);
        }
    }
}