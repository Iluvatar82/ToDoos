@using Core.Validation;
@using UI.Web.Exception;
@inherits LayoutComponentBase

<PageTitle>UI.Web</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <ErrorBoundaryWithOutput @ref=@myBoundary>
                <ChildContent>
                    <CascadingValue Value="@PageModal">
                        @Body
                    </CascadingValue>
                </ChildContent>
                <ErrorContent>
                    <div class="blazor-error-boundary">
                    @{
                        PageModal.NotNull();

                        PageModal!.Title = @<h4>Achtung Fehler!</h4>;
                        PageModal.Body =@<div class="row align-items-center">
                            <div class="col-1 text-center">
                                <span class="oi oi-warning text-danger fs-2" aria-hidden="true"></span>
                            </div>

                            <div class="col-11 text-start">
                                @foreach (var line in myErrorLines ?? Enumerable.Empty<(string Content, int Indentation)>())
                                    {
                                        <div class="d-block">
                                            @for (var i = 0; i < line.Indentation; i++)
                                            {
                                                <span class="d-inline-block">&emsp;</span>
                                            }

                                            <span class="d-inline-block">@line.Content</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        ;

                        PageModal.AcceptActionAsync = async () => @NavigationManager.NavigateTo(NavigationManager.Uri, true);
                        PageModal.AbortVisible = false;
                        PageModal.ModalClasses = "modal-xxl";

                        PageModal.Show();
                    }
                    </div>
                </ErrorContent>
            </ErrorBoundaryWithOutput>
        </article>

        <Modal @ref=PageModal></Modal>
    </main>
</div>

@code{
    private ErrorBoundaryWithOutput? myBoundary;

    [CascadingParameter]
    public Modal PageModal { get; set; } = new Modal();

    private List<(string Content, int Indentation)>? myErrorLines
    {
        get
        {
            var lines = myBoundary?.CurrentException?.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
            return lines?.Select(l => (l.Trim(), l.TakeWhile(c => Char.IsWhiteSpace(c)).Count())).ToList();
        }
    }
}
