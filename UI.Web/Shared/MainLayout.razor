@using Core.Validation;
@using Microsoft.AspNetCore.Identity;
@using UI.Web.Exception;

@inherits LayoutComponentBase

@inject IJSRuntime JS

<PageTitle>ToDo's</PageTitle>

<div class="page">
    <div class="sidebar">
        <CascadingValue Value=@User>
            <NavMenu />
        </CascadingValue>
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay UserId=@(User == null ? null : Guid.Parse(User.Id)) />
        </div>

        <ToastNotificationsContainer />
 
        <article class="content px-4 container">
            <ErrorBoundaryWithOutput @ref=@myBoundary>
                <ChildContent>
                    <CascadingValue Value=@PageModal>
                        <CascadingValue Value=@User>
                            @Body
                        </CascadingValue>
                    </CascadingValue>
                </ChildContent>

                <ErrorContent>
                    <div class="blazor-error-boundary">
                    @{
                        PageModal.NotNull();

                        PageModal!.Title = @<h4>Achtung Fehler!</h4>;
                        PageModal.Body =@<div class="row align-items-center">
                            <div class="col-1 text-center">
                                <span class="fa fa-warning text-danger fs-2" aria-hidden="true"></span>
                            </div>

                            <div class="col-11 text-start">
                                @foreach (var line in myErrorLines ?? Enumerable.Empty<(string Content, int Indentation)>())
                                    {
                                        <div class="d-block">
                                            @for (var i = 0; i < line.Indentation; i++)
                                            {
                                                <span class="d-inline-block">&emsp;</span>
                                            }

                                            <span class="d-inline-block">@line.Content</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        ;

                        PageModal.AcceptActionAsync = async () => @NavigationManager.NavigateTo(NavigationManager.Uri, true);
                        PageModal.AbortVisible = false;
                        PageModal.ModalClasses = "modal-xxl";

                        PageModal.Show();
                    }
                    </div>
                </ErrorContent>
            </ErrorBoundaryWithOutput>
        </article>

        <Modal @ref=PageModal></Modal>
    </main>
</div>

@code{
    private ErrorBoundaryWithOutput? myBoundary;
    private IJSObjectReference? JSScript { get; set; }

    [CascadingParameter]
    public Modal PageModal { get; set; } = new Modal();

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentUser = (await AuthenticationProvider.GetAuthenticationStateAsync()).User;
            if (currentUser?.Claims.Any() != true)
                return;

            var userId = Guid.Parse(currentUser.Claims!.First(c => c.Type.Contains("nameidentifier")).Value);
            User = await IdentityRepository!.GetAsync<IdentityUser>(userId.ToString());
        }
        catch(Exception ex)
        {
            LoggerFactory.CreateLogger<MainLayout>().LogError(ex, ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool isFirst)
    {
        if (JSScript == null)
        {
            JSScript = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/MainLayout.razor.js");
            await JSScript.InvokeVoidAsync("AddThemeHandlerAndGetCurrentTheme");
        }
    }

    private List<(string Content, int Indentation)>? myErrorLines
    {
        get
        {
            var lines = myBoundary?.CurrentException?.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
            return lines?.Select(l => (l.Trim(), l.TakeWhile(c => Char.IsWhiteSpace(c)).Count())).ToList();
        }
    }
}
