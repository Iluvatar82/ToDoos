@page "/administration/categories/"
@attribute [Authorize(Roles = "Administrator")]

<h4>Kategorien</h4>

@if (allCategories.Any())
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Bezeichnung</th>
                <th scope="col">Farbe</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var category in allCategories)
            {
                var currentIndex = allCategories.IndexOf(category);
                <tr class="align-middle">
                    <td @onclick=@(() => BezeichnungEditEnabled = currentIndex)>
                        @if (BezeichnungEditEnabled != currentIndex)
                        {
                            <span class="col">@category.Bezeichnung</span>
                        }
                        else
                        {
                            <input type="text" @bind-value="category.Bezeichnung" id="bezeichnung" class="form-control" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleBezeichnungChange(category); }) @onblur=@(() => HandleBezeichnungChange(category)) />
                        }
                    </td>
                    <td class="p-0">
                        <input type="color" @bind-value=category.RGB_A class="w-100" @onblur=@(() => UpdateColor(category, category.RGB_A)) />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="form-label">Es gibt noch keine Kategorie</div>
}

<div class="row">
    <div class="btn-group col-3" role="group">
        <button @onclick="NavigateToNew" class="btn btn-outline-primary">Hinzufügen</button>
    </div>
</div>

@code {
    private List<Category> allCategories { get; set; } = new List<Category>();
    private int BezeichnungEditEnabled { get; set; } = -1;


    protected override async Task OnInitializedAsync()
    {
        allCategories = await CategoryRepository.GetAllCategoriesAsync();
    }

    private async Task UpdateColor(Category category, string color)
    {
        category.RGB_A = color;
        await CategoryRepository.UpdateAndSaveAsync(category);
    }

    private async Task HandleBezeichnungChange(Category changedCategory)
    {
        await ItemRepository.UpdateAndSaveAsync(changedCategory);
        BezeichnungEditEnabled = -1;
    }

    private void NavigateToNew()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/categories/new");
    }
}
