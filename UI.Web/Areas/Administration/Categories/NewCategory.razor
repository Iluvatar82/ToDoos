@page "/administration/categories/new/{BackTo}"
@using System.ComponentModel.DataAnnotations;
@attribute [Authorize(Roles = "Administrator")]

<h4>Neue Kategorie hinzufügen</h4>

<EditForm OnSubmit=@SaveNewCategory Model=@_newCategory>
    <DataAnnotationsValidator />
    
    <div class="row">
        <div class="mb-3 col-3">
            <label for="bezeichnung" class="form-label">Bezeichnung</label>
            <input type="text" @bind-value=_newCategory.Bezeichnung id="bezeichnung" class="form-control" placeholder="Bezeichnung" />
            <ValidationMessage For=@(() => _newCategory.Bezeichnung) />
        </div>

        <div class="mb-3 col-3">
            <label for="farbe" class="form-label">Farbe</label>
            <input type="color" @bind-value=_newCategory.RGB_A id="farbe" class="form-control" />
            <ValidationMessage For=@(() => _newCategory.RGB_A) />
        </div>

        <div class="mb-3 col-3">
            <label for="farbe" class="form-label">Icon</label>
            <IconsBrowser @bind-Selected=@_newCategory.Icon></IconsBrowser>
            <ValidationMessage For=@(() => _newCategory.Icon) />
        </div>
    </div>

    <div class="row">
        <div class="btn-group col-3" role="group">
            <button type="button" @onclick="NavigateBack" class="btn btn-outline-secondary">Zurück</button>
            <button type="submit" class="btn btn-outline-primary">Speichern</button>
        </div>
    </div>
</EditForm>


@code {
    private Category _newCategory = new Category { Bezeichnung = string.Empty };

    [Parameter]
    public string BackTo { get; set; } = string.Empty;

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    protected override void OnParametersSet()
    {
        
    }

    private void NavigateBack()
    {
        if (Guid.TryParse(BackTo, out var listId))
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "list/edit/" + listId);
        else
            NavigationManager.NavigateTo(NavigationManager.BaseUri + BackTo + "/");
    }

    private async Task SaveNewCategory(EditContext context)
    {
        var valid = context.Validate();
        if (valid)
        {
            if (Guid.TryParse(BackTo, out var listId))
                _newCategory.ListId = listId;
            else
                _newCategory.UserId = Guid.Parse(User!.Id);

            await CategoryRepository.AddAndSaveAsync(_newCategory);
            NavigateBack();
        }
    }
}
