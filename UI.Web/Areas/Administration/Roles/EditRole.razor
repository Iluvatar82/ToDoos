@page "/administration/roles/new/"
@page "/administration/roles/edit/{Id}"

@using Core.Validation;
@using Microsoft.AspNetCore.Identity;
@using System.Collections;
@using System.ComponentModel.DataAnnotations;
@attribute [Authorize(Roles = "Administrator")]

@if (IsNewPage)
{
    <h4>Neue Rolle hinzufügen</h4>
}
else
{
    <h4>Rolle bearbeiten und User hinzufügen</h4>
}

<EditForm OnSubmit=@((context) => IsNewPage ? SaveNewRole(context) : ToAddUserByEmailAddress(context)) Model=@(IsNewPage ? displayRole : displayEmail)>
    <DataAnnotationsValidator />

    <div class="row">
        <div class="mb-3 col-3">
            @if (IsNewPage)
            {
                <div class="form-floating mb-3">
                    <input type="text" @bind-value=displayRole.Id id="roleId" class="form-control" placeholder="Id" />
                    <label for="roleId" class="form-label">Identifikation</label>
                    <ValidationMessage For=@(() => displayRole.Id) />
                </div>
            }
            else
            {
                <label class="form-label fw-bold">Identifikation</label>
                <div>@displayRole.Id</div>
            }
        </div>

        <div class="mb-3 col-3">
            @if (IsNewPage)
            {
                <div class="form-floating mb-3">
                    <input type="text" @bind-value=displayRole.Rolle id="bezeichnung" class="form-control" placeholder="Rolle" />
                    <label for="bezeichnung" class="form-label">Rollenbezeichnung</label>
                    <ValidationMessage For=@(() => displayRole.Rolle) />
                </div>
            }
            else
            {
                <label for="bezeichnung" class="form-label fw-bold">Rollenbezeichnung</label>
                <div>@displayRole.Rolle</div>
            }
        </div>
    </div>

    @if (!IsNewPage)
    {
        <div class="border border-1 m-3">
        @if (usersInRole?.Any() == true)
        {
            @foreach (var user in usersInRole)
            {
                <div class="row px-3 py-2">
                    <div class="col">
                        @user.UserName
                    </div>

                    <div class="col">
                        @user.Email
                    </div>
                </div>
            }
        }

            <div class="row px-3 py-2">
                <div class="col">
                    <input type="text" @bind-value=@displayEmail.Email class="form-control" />
                    <ValidationMessage For=@(() => displayEmail.Email) />
                </div>

                <div class="col">
                    <button type="submit" class="btn btn-outline-primary">User hinzufügen</button>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="btn-group col-3" role="group">
            <button type="button" @onclick="NavigateBack" class="btn btn-outline-secondary">Zurück</button>
            @if (IsNewPage)
            {
                <button type="submit" class="btn btn-outline-primary">Speichern</button>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; }

    private bool IsNewPage => string.IsNullOrWhiteSpace(Id);
    private IdentityRoleDto displayRole { get; set; } = new IdentityRoleDto() { Id = string.Empty };
    private EmailDto displayEmail { get; set; } = new EmailDto();
    private List<IdentityUser>? usersInRole = new List<IdentityUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!IsNewPage && Id != default)
            {
                var dbRole = await IdentityRepository.GetRoleAsync(Id);

                dbRole.NotNull();

                displayRole = IdentityRoleDto.ToIdentityRoleDto(dbRole!);
                usersInRole = await IdentityRepository.GetUsersWithRoleAsync(Id);
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task ToAddUserByEmailAddress(EditContext context)
    {
        try
        {
            var valid = context.Validate();
            if (valid)
            {
                displayEmail.NotNullOrEmpty();
                displayEmail.Email.NotNullOrEmpty();

                var user = await IdentityRepository.GetUserByEmailAsync(displayEmail.Email!);
                if (user != null)
                    await IdentityRepository.ApplyRoleToUserAsync(displayRole.Id, user.Id);
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void NavigateBack()
    {
        try
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/");
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task SaveNewRole(EditContext context)
    {
        try
        {
            var valid = context.Validate();
            if (valid)
            {
                displayRole.NotNull();
                displayRole.Id.NotNullOrEmpty();
                displayRole.Rolle.NotNullOrEmpty();

                await IdentityRepository.AddAndSaveAsync(IdentityRoleDto.ToIdentityRole(displayRole));

                NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/");
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }
}
