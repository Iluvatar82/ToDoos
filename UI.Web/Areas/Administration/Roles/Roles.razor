@page "/administration/roles/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;

@attribute [Authorize(Roles = "Administrator")]

<h4>Rollenverwaltung</h4>

@if (allRoles.Any())
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Rolle</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var role in allRoles)
            {
                <tr class="align-middle" @ondblclick=@(() => NavigateToEdit(role.Id))>
                    <td>
                        <span class="col">@role.Rolle</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="form-label">Es gibt noch keine Kategorie</div>
}

<div class="row">
    <div class="btn-group col-3" role="group">
        <button @onclick="NavigateToNew" class="btn btn-outline-primary">Hinzufügen</button>
    </div>
</div>

@code {
    private List<IdentityRoleDto> allRoles { get; set; } = new List<IdentityRoleDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allRoles = (await IdentityRepository.GetAllRoles()).Select(IdentityRoleDto.ToIdentityRoleDto).ToList();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void NavigateToEdit(string id)
    {
        try
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/roles/edit/" + id);
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void NavigateToNew()
    {
        try
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/roles/new");
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }
}
