@page "/list/{ListId:guid}"
@using System.Security.Claims;
@using Core.Validation;
@using Framework.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@using UI.Web.Hubs;
@inject ToastNotificationService toastService

<AuthorizeView>
    <NotAuthorized>
        <h4>Bitte einloggen!</h4>
        <div>
            <a href=@(NavigationManager.BaseUri + "Identity/Account/Login")>Login Page</a>
        </div>
    </NotAuthorized>

    <Authorized >
        <h4>@listInformation?.Name
            <span class="oi oi-wrench small ms-2" @onclick=@(() =>NavigationManager.NavigateTo(NavigationManager.BaseUri + $"list/edit/{ListId}"))></span>
        </h4>

        <div class="d-flex mb-3">
            <div class="col p-3 border border-1 bg-light">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="showInactiveControl"  @onchange=@SwitchActiveInactiveView>
                    <label class="form-check-label" for="showInactiveControl">Zeige bereits gelöschte/entfernte ToDo's</label>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="btn-group col-3" role="group">
                <button type="button" @onclick="NavigateBack" class="btn btn-outline-secondary">Zurück</button>
                <button @onclick="@(() => CreateNew())" class="btn btn-outline-primary" disabled=@showInactive>Hinzufügen</button>
            </div>
        </div>

        @if (newSubModel != null)
        {
            <div class="row mt-2">
                <ToDoNew Model=newSubModel OnChange=@((value) => HandleNewChange(value))></ToDoNew>
            </div>
        }

        @if (myToDos.Any())
        {
            <div class="d-flex p-1 mb-3 fw-bold">
                <div class="col-8">
                    Bezeichnung
                </div>

                <div class="col">
                    Kategorie
                </div>

                <div class="col">
                    Deadline
                </div>
            </div>

            @foreach (var item in myToDos)
            {
                <div class="todo-card">
                    <div class="todo-card-inner">
                        <ToDoItem_Component Model=item Level=0 InactiveMode=@showInactive ListId=ListId OnRemove=@((item) => HandleRemove(item)) OnDoneChanged=@(() => StateHasChanged())></ToDoItem_Component>
                    </div>
                </div>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    private ToDoItem? newSubModel = null;
    private List<ToDoItem> myToDos = new List<ToDoItem>();
    private bool showInactive { get; set; }
    private global::ToDo.Data.ToDoData.Entities.ToDoList? listInformation { get; set; }

    [Parameter]
    public Guid ListId { get; set; }

    [CascadingParameter]
    public HubConnection? ListHubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListHubConnection?.On<string>("JoinedList", (username) =>
        {
            toastService.SendNotification("Liste geöffnet", $"{username} hat die Liste geöffnet!", Framework.Services.Base.MessageType.Info);

            InvokeAsync(StateHasChanged);
        });

        ListHubConnection?.On<string>("UpdateList", (username) =>
        {
            toastService.SendNotification("Liste geändert", $"{username} hat die Liste geändert!. Lade Änderungen...", Framework.Services.Base.MessageType.Info);

            InvokeAsync(async () =>
            {
                await RetrieveItems();
                StateHasChanged();
            });
        });

        ListHubConnection?.On<string>("LeftList", (username) =>
        {
            toastService.SendNotification("Liste geschlossen", $"{username} hat die Liste verlassen!", Framework.Services.Base.MessageType.Info);

            InvokeAsync(StateHasChanged);
        });

        if (ListId == Guid.Empty)
        {
            var _currentUser = (await AuthenticationProvider.GetAuthenticationStateAsync()).User;
            if (_currentUser?.Claims.Any() != true)
                return;

            ListId = Guid.Parse(_currentUser.Claims!.First(c => c.Type.Contains("nameidentifier")).Value);
        }

        listInformation = await UserRepository.GetListInformationAsync(ListId);
        if (!listInformation.IsUserList && ListHubConnection != null)
            await ListHubConnection.SendAsync("JoinedGroupList", ListId);

        toastService.SendNotification("Liste geöffnet", $"Die Liste \"{listInformation.Name}\" wurde geöffnet!", Framework.Services.Base.MessageType.Info);
    }

    protected override async Task OnParametersSetAsync()
    {
        await RetrieveItems();
        await base.OnParametersSetAsync();
    }

    private async Task SwitchActiveInactiveView()
    {
        showInactive = !showInactive;

        await RetrieveItems();

        StateHasChanged();
    }

    private async Task RetrieveItems()
    {
        if (!showInactive)
        {
            myToDos = (await ItemRepository.GetAllItemsCompleteAsync(ListId, !showInactive))
                .OrderBy(item => item.Done.HasValue)
                .ThenBy(item => item.Order)
                .ThenByDescending(item => item.Deadline)
                .Where(item => item.Parent == null).ToList();
        }
        else
        {
            var allItems = await ItemRepository.GetAllItemsCompleteAsync(ListId);
            myToDos = BuildInactiveItemsFromAll(allItems)
                .OrderBy(item => item.Done.HasValue)
                .ThenBy(item => item.Order)
                .ThenByDescending(item => item.Deadline).ToList();
        }
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                Parent = null,
                CategoryId = null,
                ListId = ListId
            };
    }

    private List<ToDoItem> BuildInactiveItemsFromAll(List<ToDoItem> allItems)
    {
        var allInactiveItems = allItems.Where(item => !item.IsActive);
        var result = new HashSet<ToDoItem>();

        foreach (var inactiveItem in allInactiveItems)
        {
            var currentItem = inactiveItem;
            while(currentItem.Parent != null)
            {
                currentItem = currentItem.Parent;
                if (currentItem.VisuallyDeactivated == true)
                    break;

                if (currentItem.IsActive)
                    currentItem.VisuallyDeactivated = true;
            }

            if (!result.Contains(currentItem))
                result.Add(currentItem);
        }

        return result.ToList();
    }

    private async Task HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
        {
            myToDos.Add(item);
            myToDos = myToDos
               .OrderBy(item => item.Done.HasValue)
               .ThenBy(item => item.Order)
                   .ThenByDescending(item => item.Deadline)
                   .Where(item => item.Parent == null).ToList();
        }

        StateHasChanged();

        await ListHubConnection!.SendAsync("BroadcastListChanged", ListId);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri);
    }

    private async Task HandleRemove(ToDoItem todoItem)
    {
        myToDos.Remove(todoItem);
        StateHasChanged();

        await ListHubConnection!.SendAsync("BroadcastListChanged", ListId);
    }
}
