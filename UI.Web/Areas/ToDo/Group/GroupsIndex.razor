@page "/group/"
@using Core.Validation;
@using UI.Web.Data.Extensions;
<h3>Ihre Gruppen</h3>

<table class="table table-light small table-hover table-bordered">
    <tbody>
        @foreach (var groupEntry in myGroups)
        {
            <tr>
                <td>
                    <div>
                        <div class="d-flex justify-content-between">
                            <NavLink class="nav-link" href=@(NavigationManager.BaseUri + @groupEntry.GetGroupUrl())>
                                <div>
                                    <span class="oi oi-people text-black" aria-hidden="true"></span>
                                    <span class="fw-bold text-black ms-2">@groupEntry.Name</span>
                                </div>
                            </NavLink>

                            <span id="removeListButton" class="oi oi-x text-secondary align-self-center me-2" aria-hidden="true" @onclick=@(async () => await RemoveGroup(@groupEntry))></span>
                        </div>
                    </div>
                </td>
            </tr>
        }

        <tr>
            <td>
                <div>
                    <div class="d-flex justify-content-between">
                        <NavLink class="nav-link" href=@(NavigationManager.BaseUri + "group/new")>
                            <div>
                                <span class="oi oi-plus text-black" aria-hidden="true"></span>
                                <span class="text-black ms-2"><em>Neue Gruppe anlegen</em></span>
                            </div>
                        </NavLink>
                    </div>
                </div>
            </td>
        </tr>
    </tbody>
</table>

@code {
    private List<UserGroup> myGroups { get; set; } = new List<UserGroup>();

    [CascadingParameter]
    public Modal PageModal { get; set; }

    [CascadingParameter]
    public Guid UserId { get; set; } = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        myGroups = await UserRepository.GetAllGroupsAsync(UserId);
    }

    private async Task RemoveGroup(UserGroup group, bool force = false)
    {
        var allUsers = (await UserRepository.GetAllUsersForGroupAsync(group.GroupId)).ToArray();
        if (allUsers.Any() && !force)
        {
            PageModal.NotNull();

            PageModal!.Title = @<h5>Achtung!</h5>;
            PageModal.Body =@<div class="row align-items-center">
                <div class="col-3 text-center">
                    <span class="oi oi-warning text-warning fs-2" aria-hidden="true"></span>
                </div>

                <div class="col-9 text-start"><span>Die Gruppe "@group.Name" besteht aus @allUsers.Length Usern. Möchten Sie alle User-Zuordnungen löschen?</span></div>
            </div>;

            PageModal.AcceptActionAsync = () => RemoveGroup(group, true);

            PageModal.Show();
            return;
        }

        await UserRepository.RemoveAndSaveAsync(allUsers);
        await UserRepository.RemoveAndSaveAsync(group);

        NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
    }
}
