@using System.Diagnostics;
@using Core.Validation;

<div class="row py-2 bg-opacity-25 justify-content-end @(Model.Done.HasValue ? " bg-success" : string.Empty) @(Hidden ? "text-secondary text-opacity-25 text-opacity-25" : null)" @attributes=@GetRowAttributes()>
    <div class="d-flex col-10 col-md-8 col-sm-6">
        <div class="d-flex-min" @attributes=@GetMarginLeft()>
            <div class="px-2 @((Model.Done.HasValue || Hidden || !Model.IsActive) ? "" : "markToDoDone") p-0">
                @if (Model.Done.HasValue)
                {
                    <span class="oi oi-check text-success" aria-hidden="true" @onclick="() => SwapDone()"></span>
                }
                else
                {
                    <span class="oi oi-check text-secondary opacity-25" aria-hidden="true" @onclick="() => SwapDone()"></span>
                }
            </div>
        </div>

        <div class="col" @onclick=@(() => BezeichnungEditEnabled = Model.IsActive && !Hidden)>
            @if(!BezeichnungEditEnabled)
            {
                <span>@Model.Bezeichnung</span>
            }
            else
            {
                <EditForm Model=@Model>
                    <DataAnnotationsValidator />

                    <input type="text" @bind-value=@Model.Bezeichnung id="bezeichnung" class="form-control" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleBezeichnungChange(context); }) @onblur=@(() => HandleBezeichnungChange(context)) />
                    <ValidationMessage For=@(() => Model.Bezeichnung) />
                </EditForm>
            }
        </div>
    </div>

    <div class="col text-end">
        @if (Model.Category != null)
        {
            <span class="me-2">@Model.Category.Bezeichnung</span>
        }
    </div>

    <div class="col text-end" @onclick=@(() => DeadlineEditEnabled = Model.IsActive && !Hidden)>
        @if (!DeadlineEditEnabled)
        {
            <span>@Model.Deadline?.ToShortDateString()@(Model.Deadline?.TimeOfDay.TotalSeconds > 0 ? $" - {Model.Deadline!.Value.ToShortTimeString()}" : string.Empty)</span>
        }
        else
        {
            <div class="d-flex">
                <input type="date" @bind-value=date class="form-control col me-3" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleDeadlineChange(); }) @onblur=@(() => HandleDeadlineChange()) />
                <input type="time" @bind-value=timeOfDay class="form-control col" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleDeadlineChange(); }) @onblur=@(() => HandleDeadlineChange()) />
            </div>
        }
    </div>

    @if (!Hidden)
    {
        <div class="removeTodo d-flex-min">
            <span class="oi oi-x text-secondary opacity-25" aria-hidden="true" @onclick="() => SwapActive()"></span>
        </div>
    }
    else
    {
        <div class="d-flex-min">
            <span class="text-secondary opacity-25">&emsp;</span>
        </div>
    }
</div>

@if (Model.IsActive && !Hidden)
{
    @if (newSubModel != null)
    {
        <ToDoNew Model=newSubModel Level=@(Level + 1) OnChange=@((value) => HandleNewChange(value))></ToDoNew>
    }

    <div class="row addChildRow" @onclick=@(() => CreateNew())>
        <div class="d-flex-min px-0" @attributes=@GetLeftWidth()>
        </div>

        <div class="col text-center text-white p-0 position-relative" @attributes=@GetCheckWidthMargin()>
            <span class="oi oi-plus" aria-hidden="true"></span>
        </div>
    </div>
}

@if (Model.Children?.Any() == true)
{
    foreach (var child in Model.Children.OrderBy(item => item.Done.HasValue).ThenBy(item => item.Order).ThenByDescending(item => item.Deadline))
    {
        if (InactiveMode && !child.VisuallyDeactivated && child.IsActive)
            continue;

        <ToDoItem_Component Model=child Level=@(Level + 1) InactiveMode=InactiveMode ListId=ListId OnRemove=@((item) => HandleRemove(item)) OnDoneChanged=@(() => StateHasChanged())></ToDoItem_Component>
    }
}

@code {
    [CascadingParameter]
    public Modal? PageModal { get; set; }

    [Parameter]
    public ToDoItem Model { get; set; } = new ToDoItem();

    [Parameter]
    public bool InactiveMode { get; set; } = false;

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public EventCallback<ToDoItem> OnRemove { get; set; }

    [Parameter]
    public EventCallback OnDoneChanged { get; set; }

    private ToDoItem? newSubModel { get; set; } = null;

    private bool BezeichnungEditEnabled { get; set; } = false;
    private bool DeadlineEditEnabled { get; set; } = false;
    private DateTime? date { get; set; }
    private DateTime? timeOfDay { get; set; }
    private bool Hidden => InactiveMode && Model.IsActive;


    protected override void OnInitialized()
    {
        date = Model.Deadline?.Date;
        timeOfDay = Model.Deadline;

        base.OnInitialized();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                ParentId = Model.Id,
                CategoryId = Model.CategoryId,
                ListId = ListId
            };
    }

    private async Task SwapDone()
    {
        if (Hidden || !Model.IsActive)
            return;

        if (Model.Done == null)
            Model.Done = DateTime.Now;
        else
            Model.Done = null;

        await ItemRepository.UpdateAndSaveAsync(Model);
        await OnDoneChanged.InvokeAsync(Model);
    }

    private async Task HandleBezeichnungChange(EditContext context)
    {
        var valid = context.Validate();
        if (valid)
        {
            await ItemRepository.UpdateAndSaveAsync(Model);
            BezeichnungEditEnabled = false;
        }
    }

    private async Task HandleDeadlineChange()
    {
        if (date != default)
            Model.Deadline = date;

        if (timeOfDay != default)
            Model.Deadline = date == default
                                ? timeOfDay
                                : date!.Value.AddSeconds(timeOfDay!.Value.TimeOfDay.TotalSeconds);


        await ItemRepository.UpdateAndSaveAsync(Model);

        DeadlineEditEnabled = false;
    }

    private async Task SwapActive(bool force = false)
    {
        if (Hidden)
            return;

        if (Model.Children?.Any() == true && !force)
        {
            PageModal.NotNull();

            PageModal!.Title = @<h5>Achtung!</h5>;
            PageModal.Body =@<div class="row align-items-center">
                <div class="col-3 text-center">
                    <span class="oi oi-warning text-warning fs-2" aria-hidden="true"></span>
                </div>

                <div class="col-9 text-start">Das Item "@(Model.Bezeichnung)" besitzt Unter-Items. Möchten Sie alle Items @(Model.IsActive ? "inaktiv" : "aktiv") setzen?</div>
            </div>;

            PageModal.AcceptActionAsync = async () => await SwapActive(true);

            PageModal.Show();
            return;
        }
        else if (force == true)
            SetActiveStateForAll(Model, !Model.IsActive);
        else
            Model.IsActive = !Model.IsActive;

        await ItemRepository.UpdateAndSaveAsync(Model);

        StateHasChanged();
        await OnRemove.InvokeAsync(Model);
    }

    private void SetActiveStateForAll(ToDoItem item, bool isActive)
    {
        foreach (var childItem in item.Children ?? Enumerable.Empty<ToDoItem>())
            SetActiveStateForAll(childItem, isActive);

        item.IsActive = isActive;
    }

    private async Task HandleRemove(ToDoItem todoItem)
    {
        Model.Children.Remove(todoItem);

        StateHasChanged();
        await OnRemove.InvokeAsync(todoItem);
    }

    private void HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
        {
            Model.Children.Add(item);
            Model.Children = Model.Children
                .OrderBy(item => item.Done.HasValue)
                .ThenBy(item => item.Order)
                .ThenByDescending(item => item.Deadline).ToList();
        }

        StateHasChanged();
    }

    private Dictionary<string, object>? GetRowAttributes()
    {
        if (Model.CategoryId == null || Model.Done.HasValue || Hidden)
            return null;

        var styleString = $"background: {Model.Category!.RGB_A};";
        return new Dictionary<string, object>
        {
            { "style", styleString }
        };
    }

    private Dictionary<string, object>? GetMarginLeft()
    {
        return new Dictionary<string, object>
        {
            { "style", $"margin-left: {Level * 32}px;" }
        };
    }

    private Dictionary<string, object>? GetCheckWidthMargin()
    {
        return new Dictionary<string, object>
        {
            { "style", $"margin-left: 44px;" }
        };
    }

    private Dictionary<string, object>? GetLeftWidth()
    {
        return new Dictionary<string, object>
        {
            { "style", $"min-width: {Level * 32}px;" }
        };
    }
}