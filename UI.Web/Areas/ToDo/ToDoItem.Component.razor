@using System.Diagnostics;
@using global::ToDo.Data.Entities;

<div class="row bg-opacity-25@(Model.Done.HasValue ? " bg-success" : string.Empty)" @attributes=@GetRowAttributes()>
    <div class="d-flex col-8">
        <div class="d-flex-min" @attributes=@GetMarginLeft()>
            <div class="px-2 @(Model.Done.HasValue ? "" : "animateToSuccess") p-0">
                @if (Model.Done.HasValue)
                {
                    <span class="oi oi-check text-success" aria-hidden="true" @onclick="() => SwapDone()"></span>
                }
                else
                {
                    <span class="oi oi-check text-secondary opacity-25" aria-hidden="true" @onclick="() => SwapDone()"></span>
                }
            </div>
        </div>

        <div class="col" @onclick=@(() => BezeichnungEditEnabled = true)>
            @if(!BezeichnungEditEnabled)
            {
                <span>@Model.Bezeichnung</span>
            }
            else
            {
                <input type="text" @bind-value="Model.Bezeichnung" id="bezeichnung" class="form-control" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleBezeichnungChange(); }) @onblur=@(() => HandleBezeichnungChange()) />
            }
        </div>
    </div>

    <div class="col">
        @if (Model.Category != null)
        {
            <div class="d-flex">
                <span class="me-2">@Model.Category.Bezeichnung</span>
                <input type="color" value="@Model.Category.RGB_A" disabled class="w-100" />
            </div>
        }
    </div>

    <div class="col" @onclick=@(() => DeadlineEditEnabled = true)>
        @if (!DeadlineEditEnabled)
        {
            @Model.Deadline?.ToShortDateString()@(Model.Deadline?.TimeOfDay.TotalSeconds > 0 ? $" - {Model.Deadline!.Value.ToShortTimeString()}" : string.Empty)
        }
        else
        {
            <div class="d-flex">
                <input type="date" @bind-value=date class="form-control col me-3" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleDeadlineChange(); }) @onblur=@(() => HandleDeadlineChange()) />
                <input type="time" @bind-value=timeOfDay class="form-control col" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleDeadlineChange(); }) @onblur=@(() => HandleDeadlineChange()) />
            </div>
        }
    </div>

    <div class="removeTodo d-flex-min">
        <span class="oi oi-x text-secondary opacity-25" aria-hidden="true" @onclick="() => Remove()"></span>
    </div>
</div>

@if (newSubModel != null)
{
    <ToDoNew Model=newSubModel Level=@(Level + 1) OnChange=@((value) => HandleNewChange(value))></ToDoNew>
}

<div class="row addChildRow" @onclick=@(() => CreateNew())>
    <div class="d-flex-min px-0" @attributes=@GetLeftWidth()>
    </div>

    <div class="col text-center text-white p-0 position-relative" @attributes=@GetCheckWidthMargin()>
        <span class="oi oi-plus" aria-hidden="true"></span>
    </div>
</div>

@if (Model.Children?.Any() == true)
{
    foreach (var child in Model.Children)
    {
        <ToDoItem_Component Model=child Level=@(Level + 1) UserId=UserId OnRemove=@((item) => HandleRemove(item))></ToDoItem_Component>
    }
}


@code {
    [Parameter]
    public ToDoItem Model { get; set; } = new ToDoItem();

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public EventCallback<ToDoItem> OnRemove { get; set; }

    private ToDoItem? newSubModel { get; set; } = null;

    private bool BezeichnungEditEnabled { get; set; } = false;
    private bool DeadlineEditEnabled { get; set; } = false;
    private DateTime? date { get; set; }
    private DateTime? timeOfDay { get; set; }

    protected override void OnInitialized()
    {
        date = Model.Deadline?.Date;
        timeOfDay = Model.Deadline;

        base.OnInitialized();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                ParentId = Model.Id,
                CategoryId = Model.CategoryId
            };

        newSubModel.UserAssignments = new List<UserToDoAssignment> {
            new UserToDoAssignment {
                ToDoItemId = newSubModel.Id,
                UserId = UserId
            }
        };
    }

    private async Task SwapDone()
    {
        using var repository = DbFactory.CreateDbContext();

        if (Model.Done == null)
            Model.Done = DateTime.Now;
        else
            Model.Done = null;

        repository.Update(Model);
        await repository.SaveChangesAsync();
    }

    private async Task HandleBezeichnungChange()
    {
        using var repository = DbFactory.CreateDbContext();

        repository.Update(Model);
        await repository.SaveChangesAsync();

        BezeichnungEditEnabled = false;
    }

    private async Task HandleDeadlineChange()
    {
        if (date != default)
            Model.Deadline = date;

        if (timeOfDay != default)
            Model.Deadline = date == default
                                ? timeOfDay
                                : date!.Value.AddSeconds(timeOfDay!.Value.TimeOfDay.TotalSeconds);

        using var repository = DbFactory.CreateDbContext();

        repository.Update(Model);
        await repository.SaveChangesAsync();

        DeadlineEditEnabled = false;
    }

    private async Task Remove()
    {
        using var repository = DbFactory.CreateDbContext();

        Model.IsActive = false;
        repository.Update(Model);
        await repository.SaveChangesAsync();

        StateHasChanged();
        await OnRemove.InvokeAsync(Model);
    }

    private async Task HandleRemove(ToDoItem todoItem)
    {
        Model.Children.Remove(todoItem);

        StateHasChanged();
        await OnRemove.InvokeAsync(todoItem);
    }

    private void HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
            Model.Children.Add(item);

        StateHasChanged();
    }

    private Dictionary<string, object>? GetRowAttributes()
    {
        if (Model.CategoryId == null || Model.Done.HasValue)
            return null;

        var styleString = $"background: {Model.Category!.RGB_A};";
        return new Dictionary<string, object>
        {
            { "style", styleString }
        };
    }

    private Dictionary<string, object>? GetMarginLeft()
    {
        return new Dictionary<string, object>
        {
            { "style", $"margin-left: {Level * 32}px;" }
        };
    }

    private Dictionary<string, object>? GetCheckWidthMargin()
    {
        return new Dictionary<string, object>
        {
            { "style", $"margin-left: 44px;" }
        };
    }

    private Dictionary<string, object>? GetLeftWidth()
    {
        return new Dictionary<string, object>
        {
            { "style", $"min-width: {Level * 32}px;" }
        };
    }
}