@using System.Security.Claims;
@using Core.Validation;
@using UI.Web.Data.Extensions;
<h3>Ihre ToDo Listen</h3>

<table class="table table-light small table-hover table-bordered">
    <tbody>
        @foreach (var listEntry in myLists)
        {
            <tr>
                <td>
                    <div>
                        <div class="d-flex justify-content-between">
                            <NavLink class="nav-link" href=@(NavigationManager.BaseUri + @listEntry.GetListUrl())>
                                <div>
                                    <span class="oi oi-@listEntry.GetToDoListTypeIcon() text-black" aria-hidden="true"></span>
                                    <span class="fw-bold text-black ms-2">@listEntry.Name</span>
                                </div>
                            </NavLink>

                            <span id="removeListButton" class="oi oi-x text-secondary align-self-center me-2" aria-hidden="true" @onclick=@(async () => await RemoveList(@listEntry))></span>
                        </div>
                    </div>
                </td>
            </tr>
        }

        <tr>
            <td>
                <div>
                    <div class="d-flex justify-content-between">
                        <NavLink class="nav-link" href=@(NavigationManager.BaseUri + "list/new")>
                            <div>
                                <span class="oi oi-plus text-black" aria-hidden="true"></span>
                                <span class="text-black ms-2"><em>Neue Liste anlegen</em></span>
                            </div>
                        </NavLink>
                    </div>
                </div>
            </td>
        </tr>
    </tbody>
</table>



@code {
    private List<global::ToDo.Data.ToDoData.Entities.ToDoList> myLists { get; set; } = new List<global::ToDo.Data.ToDoData.Entities.ToDoList>();

    [CascadingParameter]
    public Modal PageModal { get; set; }

    [CascadingParameter]
    public Guid UserId { get; set; } = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        myLists = await UserRepository.GetAllListsAsync(UserId);
    }

    private async Task RemoveList(global::ToDo.Data.ToDoData.Entities.ToDoList list, bool force = false)
    {
        var flatItems = (await ItemRepository.GetAllItemsCompleteAsync(list.Id)).ToArray();
        if (flatItems.Any() && !force)
        {
            PageModal.NotNull();

            PageModal!.Title = @<h5>Achtung!</h5>;
            PageModal.Body =@<div class="row align-items-center">
                <div class="col-3 text-center">
                    <span class="oi oi-warning text-warning fs-2" aria-hidden="true"></span>
                </div>

                <div class="col-9 text-start"><span>Die Liste "@list.Name" besitzt ToDo-Items. Möchten Sie alle @flatItems.Length Items mitlöschen?</span></div>
            </div>;

            PageModal.AcceptActionAsync = () => RemoveList(list, true);

            PageModal.Show();
            return;
        }

        await ItemRepository.RemoveAndSaveAsync(flatItems);
        await UserRepository.RemoveAndSaveAsync(list);

        NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
    }
}
