@using System.Security.Claims;
@using global::ToDo.Data.Entities;
@page "/list/{UserId:guid}"

<AuthorizeView>
    <NotAuthorized>
        <h4>Bitte einloggen!</h4>
        <div>
            <a href=@(NavigationManager.BaseUri + "Identity/Account/Login")>Login Page</a>
        </div>
    </NotAuthorized>
    <Authorized >
        <h4>Meine ToDo's</h4>

        <div class="row mb-3">
            <div class="col p-3 border border-1 bg-light">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="showInactiveControl"  @onchange=@SwitchActiveInactiveView>
                    <label class="form-check-label" for="showInactiveControl">Zeige bereits gelöschte/entfernte ToDo's</label>
                </div>
            </div>
        </div>

        @if (myToDos.Any())
        {
            <div class="row p-1 mb-3 fw-bold">
                <div class="col-8">
                    Bezeichnung
                </div>

                <div class="col">
                    Kategorie
                </div>

                <div class="col">
                    Deadline
                </div>
            </div>

            @foreach (var item in myToDos)
            {
                <div class="todo-card">
                    <div class="todo-card-inner">
                        <ToDoItem_Component Model=item Level=0 UserId=UserId OnRemove=@((item) => HandleRemove(item))></ToDoItem_Component>
                    </div>
                </div>
            }
        }

        @if (newSubModel != null)
        {
            <ToDoNew Model=newSubModel OnChange=@((value) => HandleNewChange(value))></ToDoNew>
        }

        @if (!showInactive)
        {
            <div class="row">
                <div class="btn-group col-3" role="group">
                <button @onclick="@(() => CreateNew())" class="btn btn-outline-primary">Hinzufügen</button>
            </div>
        </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private ToDoItem? newSubModel = null;
    private List<ToDoItem> myToDos = new List<ToDoItem>();
    private bool showInactive { get; set; }

    [Parameter]
    public Guid UserId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (UserId == Guid.Empty)
        {
            var _currentUser = (await AuthenticationProvider.GetAuthenticationStateAsync()).User;
            if (_currentUser?.Claims.Any() != true)
                return;

            UserId = Guid.Parse(_currentUser.Claims!.First(c => c.Type.Contains("nameidentifier")).Value);
        }

        await RetrieveItems();
    }

    private async Task SwitchActiveInactiveView()
    {
        showInactive = !showInactive;

        await RetrieveItems();

        StateHasChanged();
    }

    private async Task RetrieveItems()
    {
        myToDos = (await ItemRepository.GetAllItemsCompleteAsync(UserId, !showInactive))
            .OrderBy(item => item.Order)
                    .ThenBy(item => item.Deadline)
                    .Where(item => item.Parent == null).ToList();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                Parent = null,
                CategoryId = null
            };

        newSubModel.UserAssignments = new List<UserToDoAssignment> {
            new UserToDoAssignment {
                ToDoItemId = newSubModel.Id,
                UserId = UserId
            }
        };
    }

    private void HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
            myToDos.Add(item);

        StateHasChanged();
    }

    private void HandleRemove(ToDoItem todoItem)
    {
        myToDos.Remove(todoItem);
        StateHasChanged();
    }
}
