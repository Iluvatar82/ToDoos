@using System.Security.Claims;
@using global::ToDo.Data.Entities;

<AuthorizeView>
    <NotAuthorized>
        <h4>Bitte einloggen!</h4>
        <div>
            <a href=@(NavigationManager.BaseUri + "Identity/Account/Login")>Login Page</a>
        </div>
    </NotAuthorized>
    <Authorized >
        <h4>Meine ToDo's</h4>

        @if (_myToDos.Any())
        {
            <div class="row p-1 mb-3 fw-bold">
                <div class="col-8">
                    Bezeichnung
                </div>

                <div class="col">
                    Kategorie
                </div>

                <div class="col">
                    Deadline
                </div>
            </div>

            @foreach (var item in _myToDos)
            {
                <div class="todo-card">
                    <ToDoItem_Component Model=item Level=0 UserId=_currentUserId!.Value OnRemove=@((item) => HandleRemove(item))></ToDoItem_Component>
                </div>
            }
        }

        @if (newSubModel != null)
        {
            <ToDoNew Model=newSubModel OnChange=@((value) => HandleNewChange(value))></ToDoNew>
        }

        <div class="row">
            <div class="btn-group col-3" role="group">
                <button @onclick="@(() => CreateNew())" class="btn btn-outline-primary">Hinzufügen</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private ToDoItem? newSubModel = null;
    private List<ToDoItem> _myToDos = new List<ToDoItem>();
    private ClaimsPrincipal? _currentUser { get; set; }
    private Guid? _currentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var _currentUser = (await AuthenticationProvider.GetAuthenticationStateAsync()).User;
        if (_currentUser?.Claims.Any() != true)
            return;

        _currentUserId = Guid.Parse(_currentUser.Claims!.First(c => c.Type.Contains("nameidentifier")).Value);

        using var repository = DbFactory.CreateDbContext();
        _myToDos = (await repository.ToDoItems
            .Include(todo => todo.Category)
            .Include(todo => todo.UserAssignments)
            .Where(todo => todo.UserAssignments.Any(ua => ua.UserId == _currentUserId))
                .OrderBy(todo => todo.Order)
                .ThenBy(todo => todo.Deadline).ToListAsync())
                    .Where(todo => todo.Parent == null).ToList();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                Parent = null,
                CategoryId = null
            };

        newSubModel.UserAssignments = new List<UserToDoAssignment> {
            new UserToDoAssignment {
                ToDoItemId = newSubModel.Id,
                UserId = _currentUserId!.Value
            }
        };
    }

    private void HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
            _myToDos.Add(item);

        StateHasChanged();
    }

    private void HandleRemove(ToDoItem todoItem)
    {
        _myToDos.Remove(todoItem);
        StateHasChanged();
    }
}
