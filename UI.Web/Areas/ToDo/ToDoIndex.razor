@using global::ToDo.Data.Entities;
<h4>Meine ToDo's</h4>

@if (_myToDos.Any())
{
    <div class="row p-1 mb-3 fw-bold">
        <div class="col-8">
            Bezeichnung
        </div>

        <div class="col">
            Kategorie
        </div>

        <div class="col">
            Deadline
        </div>
    </div>

    @foreach (var item in _myToDos)
    {
        <div class="todo-card">
            <ToDoItem_Component Model=item Level=0 OnRemove=@((item) => HandleRemove(item))></ToDoItem_Component>
        </div>
    }
}

@if (newSubModel != null)
{
    <ToDoNew Model=newSubModel OnChange=@((value) => HandleNewChange(value))></ToDoNew>
}

<div class="row">
    <div class="btn-group col-3" role="group">
        <button @onclick="@(() => CreateNew())" class="btn btn-outline-primary">Hinzufügen</button>
    </div>
</div>

@code {
    private ToDoItem? newSubModel = null;
    private List<ToDoItem> _myToDos = new List<ToDoItem>();

    protected override async Task OnInitializedAsync()
    {
        using var repository = DbFactory.CreateDbContext();

        _myToDos = (await repository.ToDoItems.Include(todo => todo.Category).OrderBy(todo => todo.Order).ThenBy(todo => todo.Deadline).ToListAsync()).Where(todo => todo.Parent == null).ToList();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                Parent = null,
                CategoryId = null
            };
    }

    private void HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
            _myToDos.Add(item);

        StateHasChanged();
    }

    private void HandleRemove(ToDoItem todoItem)
    {
        _myToDos.Remove(todoItem);
        StateHasChanged();
    }
}
