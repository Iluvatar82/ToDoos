@page "/categories/"
@using System.ComponentModel.DataAnnotations;
@using Core.Validation
@using Microsoft.AspNetCore.SignalR.Client

@inject ToastNotificationService ToastService
@inject NotificationService NotificationService

<h4>Kategorien</h4>

@if (AllCategories.Any())
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Bezeichnung</th>
                <th scope="col">Icon</th>
                <th scope="col">Farbe</th>
                <th scope="col"></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var category in AllCategories)
            {
                var currentIndex = AllCategories.IndexOf(category);
                <tr class="align-middle">
                    <td @onclick=@(() => BezeichnungEditEnabled = currentIndex)>
                        @if (BezeichnungEditEnabled != currentIndex)
                        {
                            <span class="col">@category.Bezeichnung</span>
                        }
                        else
                        {
                            <EditForm Model=@category>
                                <DataAnnotationsValidator />

                                <input type="text" @bind-value=category.Bezeichnung id="bezeichnung" class="form-control" @onkeyup=@((KeyboardEventArgs key) => { if(key.Code == "Enter") HandleBezeichnungChange(context, category); }) @onblur=@(() => HandleBezeichnungChange(context, category)) />
                                <ValidationMessage For=@(() => category.Bezeichnung) />
                            </EditForm>
                        }
                    </td>

                    <td class="p-0 small-column">
                        <IconsBrowser Selected=@category.Icon IconDisplayOnly=true SelectedChanged=@((icon) => IconChanged(category, icon)) />
                    </td>

                    <td class="p-0">
                        <input type="color" @bind-value=category.RGB_A class="w-100" @onblur=@(() => UpdateColor(category, category.RGB_A)) />
                    </td>

                    <td class="p-0 small-column">
                        <span class="px-2 fa fa-xmark opacity-25" aria-hidden="true" @onclick=@(() => RemoveCategory(currentIndex))></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="form-label">Es gibt noch keine Kategorie</div>
}

<div class="row">
    <div class="btn-group col-3" role="group">
        <button @onclick=@NavigateToNew class="btn btn-outline-primary">Hinzufügen</button>
        @if (ListId == null)
        {
            <button type="button" @onclick="Save" class="btn btn-primary">Speichern</button>
        }
    </div>
</div>

@code {
    private int BezeichnungEditEnabled { get; set; } = -1;

    [Parameter]
    public Guid? ListId { get; set; }

    [Parameter]
    public List<CategoryDomainModel> AllCategories { get; set; } = new List<CategoryDomainModel>();

    [CascadingParameter]
    public HubConnection? UpdateHubConnection { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    public List<CategoryDomainModel> EntitiesToRemove { get; set; } = new List<CategoryDomainModel>();

    [Parameter]
    public EventCallback<CategoryDomainModel> OnRemoved { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (User == null && ListId == null)
                return;

            if (ListId != null)
            {
                if (!AllCategories.Any())
                    AllCategories = ModelMapper.MapToList<CategoryDomainModel>(await CategoryRepository.GetAllAsync(c => c.ListId == ListId)).ToList();
            }
            else
            {
                var guidId = Guid.Parse(User!.Id);
                AllCategories = ModelMapper.MapToList<CategoryDomainModel>(await CategoryRepository.GetAllAsync(c => c.UserId == guidId)).ToList();
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    private void UpdateColor(CategoryDomainModel category, string color)
    {
        try
        {
            category.RGB_A = color;
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void HandleBezeichnungChange(EditContext context, CategoryDomainModel changedCategory)
    {
        try
        {
            var valid = context.Validate();
            if (valid)
                BezeichnungEditEnabled = -1;
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void IconChanged(CategoryDomainModel changedCategory, string icon)
    {
        try
        {
            changedCategory.Icon = icon;
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private async void RemoveCategory(int index)
    {
        try
        {
            //TODO Check einbauen (ob Items mit der Category existieren)
            index.Satisfies(i => i < AllCategories.Count);

            var toRemove = AllCategories[index];
            if (toRemove.Id != Guid.Empty)
                EntitiesToRemove.Add(toRemove);

            AllCategories.RemoveAt(index);

            await OnRemoved.InvokeAsync(toRemove);
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private void NavigateToNew()
    {
        try
        {
            if (ListId != null)
                NavigationManager.NavigateTo(NavigationManager.BaseUri + $"administration/categories/new/{ListId}");
            else
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "administration/categories/new/categories");
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task Save()
    {
        try
        {
            if (User?.Id == null)
                return;

            if (EntitiesToRemove.Any())
                await ItemRepository.RemoveAndSaveAsync(ModelMapper.MapToArray(EntitiesToRemove));

            await ItemRepository.AddOrUpdateAndSaveAsync(ModelMapper.MapToArray(AllCategories));

            var title = "Kategorien gespeichert";
            var message = "Die Änderungen an den Kategorien wurden gespeichert";

            await ToastService.SendAsync(title, message, Framework.Services.Base.MessageType.Info);
            await NotificationService.SaveNotifications(title, message, User.Id);
            if (UpdateHubConnection != null)
                await UpdateHubConnection.SendAsync("UpdateNotifications", new List<string> { User.Id });
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }
}
