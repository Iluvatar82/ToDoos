@page "/group/"
@using Core.Validation;
@using UI.Web.Data.Extensions;
<h3>Ihre Gruppen</h3>

<table class="table table-light small table-hover table-bordered">
    <tbody>
        @foreach (var groupEntry in myGroups)
        {
            <tr>
                <td>
                    <div>
                        <div class="d-flex justify-content-between">
                            <NavLink class="nav-link" href=@(NavigationManager.BaseUri + @groupEntry.GetGroupUrl())>
                                <div>
                                    <i class="fa fa-users text-black" aria-hidden="true"></i>
                                    <span class="fw-bold text-black ms-2">@groupEntry.Name</span>
                                </div>
                            </NavLink>

                            <span id="removeGroupButton" class="text-secondary align-self-center me-2" aria-hidden="true" @onclick=@(async () => await RemoveGroup(@groupEntry))><i class="fa fa-xmark" aria-hidden="true"></i></span>
                        </div>
                    </div>
                </td>
            </tr>
        }

        <tr>
            <td>
                <EditForm OnSubmit=@SaveNewGroup Model=@newGroup>
                    <DataAnnotationsValidator />

                    <div class="d-flex align-items-center">
                        <div class="col mx-2 px-2">
                            <label for="name" class="form-label fw-bold mb-0 float-end">Gruppen Name</label>
                        </div>

                        <div class="col mx-2 px-2">
                            <input type="text" @bind-value=newGroup.Name id="name" class="form-control" placeholder="Name" />
                            <ValidationMessage For=@(() => newGroup.Name) />
                        </div>

                        <div class="col mx-2 px-2" role="group">
                            <button type="submit" class="btn btn-outline-primary">Neue Gruppe speichern</button>
                        </div>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tbody>
</table>

@code {
    private List<UserGroupDomainModel> myGroups { get; set; } = new List<UserGroupDomainModel>();
    private UserGroupDomainModel newGroup = new UserGroupDomainModel { GroupId = Guid.NewGuid() };

    [CascadingParameter]
    public Modal? PageModal { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (User == null)
                return;

            var guidId = Guid.Parse(User.Id);
            myGroups = ModelMapper.MapToList<UserGroupDomainModel>(await UserRepository.GetAllGroupsAsync(guidId));
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    private async Task SaveNewGroup(EditContext context)
    {
        try
        {
            var valid = context.Validate();
            if (valid && User != default)
            {
                var guidId = Guid.Parse(User.Id);
                newGroup.UserId = guidId;

                await UserRepository.AddAndSaveAsync(ModelMapper.Map(newGroup));

                myGroups.Add(newGroup);

                newGroup = new UserGroupDomainModel { GroupId = Guid.NewGuid() };
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task RemoveGroup(UserGroupDomainModel group, bool validated = false)
    {
        try
        {
            var allUsers = ModelMapper.MapToList<UserGroupDomainModel>((await UserRepository.GetAllUsersForGroupAsync(group.GroupId)));
            if (allUsers.Any() && !validated)
            {
                PageModal.NotNull();

                PageModal!.Title = @<h5>Achtung!</h5>;
                PageModal.Body =@<div class="row align-items-center">
                    <div class="col-3 text-center">
                        <span class="fa fa-warning text-warning fs-2" aria-hidden="true"></span>
                    </div>

                    <div class="col-9 text-start"><span>Die Gruppe "@group.Name" besteht aus @allUsers.Count Usern. Möchten Sie alle User-Zuordnungen löschen?</span></div>
                </div>;

                PageModal.AcceptActionAsync = () => RemoveGroup(group, true);

                PageModal.Show();
                return;
            }

            await UserRepository.RemoveAndSaveAsync(ModelMapper.MapToArray(allUsers));

            myGroups.Remove(group);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }
}
