@using System.Diagnostics;
@using Core.Validation;
@using Framework.Services;
@using Microsoft.AspNetCore.SignalR.Client;

<tr @ref=@ItemReference class="bg-opacity-25 align-items-baseline @(Level == 0 ? "top" : string.Empty) @(Model.Done.HasValue ? "bg-success" : string.Empty) @(Hidden ? "text-secondary text-opacity-25" : null)"
    draggable="true" @ondragstart=@(_ => HandleDragStart(Model)) ondragover="event.preventDefault();" @ondrop=@(_ => HandleDrop(Model)) @attributes=@GetRowAttributes()>
    <td class="position-relative fade-in-on-hover">
        <span class="fa fa-grip-vertical opacity-25"></span>
    </td>

    <td class="fixed-w position-relative">
        <div class="addChild text-center text-white p-0 position-absolute" @onclick=@CreateNew>
            <span class="fa fa-plus" aria-hidden="true"></span>
        </div>

        <div class="px-2 @((Model.Done.HasValue || Hidden || !Model.IsActive) ? "" : "markToDoDone fade-in-on-hover") p-0">
            @if (Model.Done.HasValue)
            {
                <span class="text-success" @onclick=@SwapDone><i class="fa fa-check" aria-hidden="true"></i></span>
            }
            else
            {
                <span class="opacity-25" @onclick=@SwapDone><i class="fa fa-check" aria-hidden="true"></i></span>
            }
        </div>
    </td>

    <td class="position-relative" @attributes=@GetPaddingLeft() @onclick=@SetBezeichnungEditEnabled >
        @if (!BezeichnungEditEnabled)
        {
            @BezeichnungFragment
            if(!string.IsNullOrWhiteSpace(OccurrenceString))
            {
                <span class="next-occurrence-info">@OccurrenceString</span>
            }
        }
        else
        {
            <EditForm Model=@Model>
                <DataAnnotationsValidator />

                <input type="text" @bind-value=@Model.Bezeichnung id="bezeichnung" class="form-control" @onkeyup=@(async (KeyboardEventArgs key) => { if(key.Code == "Enter") await HandleBezeichnungChange(context); }) @onblur=@(() => HandleBezeichnungChange(context)) />
                <ValidationMessage For=@(() => Model.Bezeichnung) />
            </EditForm>
        }
    </td>

    <td class="fixed-w text-end fade-in-on-hover">
        @if(!string.IsNullOrWhiteSpace(OccurrenceString))
        {
            <span class="px-2 position-relative fa fa-clock @(Model.NextOrLastOccurrence < DateTime.Now ? "opacity-50" : string.Empty)" tooltip=@OccurrenceString @onclick=@(() => NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Schedule/{ListId}/{Model.Id}"))></span>
        }
        else
        {
            <span class="px-2 position-relative fa-regular fa-clock opacity-25" @onclick=@(() => NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Schedule/{ListId}/{Model.Id}"))></span>
        }
    </td>

    <td class="fixed-w text-end">
        @if (Model.Category != null)
        {
            <span class="px-2 position-relative @Model.Category.Icon" tooltip=@Model.Category.Bezeichnung></span>
        }
    </td>

    <td class="fixed-w fade-in-on-hover">
        @if (!Hidden)
        {
            <span class="px-2 fa fa-xmark opacity-25" aria-hidden="true" @onclick=@(() => SwapActive())></span>
        }
        else
        {
            <span class="opacity-25">&emsp;</span>
        }
    </td>
</tr>

@if (Model.IsActive && !Hidden)
{
    @if (newSubModel != null)
    {
        <tr>
            <td colspan="5">
                <ToDoNew Model=newSubModel Level=@(Level + 1) OnChange=@HandleNewChange></ToDoNew>
            </td>
        </tr>
    }
}

@if (Model.Children?.Any() == true)
{
    foreach (var child in Model.Children.OrderBy(item => item.Done.HasValue).ThenBy(item => item.Order).ThenByDescending(item => item.NextOrLastOccurrence))
    {
        if (InactiveMode && !child.VisuallyDeactivated && child.IsActive)
            continue;

        <ToDoItem_Component Model=child Level=@(Level + 1) InactiveMode=InactiveMode ListId=ListId OnRemove=@HandleRemove OnDraggedFrom=@(info => HandleDraggedFrom(info.Source, info.Item)) OnDraggedTo=@(info => HandleDraggedTo(info.Destination, info.Item)) OnDoneChanged=@StateHasChanged></ToDoItem_Component>
    }
}

@if(Level == 0)
{
    <tr class="todo-item-separator" ondragover="event.preventDefault();" @ondrop=@(_ => HandleDrop(null)) @attributes=@GetRowAttributes(true)>
        <td colspan="6" class="border-bottom-0"></td>
    </tr>
}

@code {
    [CascadingParameter]
    ToDoList? Container { get; set; }

    [CascadingParameter]
    public Modal? PageModal { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    [CascadingParameter]
    public HubConnection? ListHubConnection { get; set; }

    [Parameter]
    public ToDoItem Model { get; set; } = new ToDoItem();

    [Parameter]
    public bool InactiveMode { get; set; } = false;

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public EventCallback<ToDoItem> OnRemove { get; set; }

    [Parameter]
    public EventCallback<(ToDoItem Destination, ToDoItem Item)> OnDraggedTo { get; set; }

    [Parameter]
    public EventCallback<(ToDoItem Source, ToDoItem Item)> OnDraggedFrom { get; set; }

    [Parameter]
    public EventCallback OnDoneChanged { get; set; }

    private ElementReference reference;
    public ElementReference ItemReference { get => reference; private set { reference = value; OnReferenced.InvokeAsync(value); } }
    
    [Parameter]
    public EventCallback<ElementReference> OnReferenced { get; set; }

    private ToDoItem? newSubModel { get; set; } = null;

    private bool BezeichnungEditEnabled { get; set; } = false;
    private DateTime? date { get; set; }
    private DateTime? timeOfDay { get; set; }
    private bool Hidden => InactiveMode && Model.IsActive;

    private RenderFragment BezeichnungFragment => (__builder) => __builder.AddMarkupContent(0, ItemContentRenderService.RenderContent(Model.Bezeichnung));
    private string OccurrenceString
    {
        get
        {
            if (Model.NextOrLastOccurrence == null)
                return string.Empty;

            var result = Model.NextOrLastOccurrence.Value.ToShortDateString();
            if (Model.NextOrLastOccurrence.Value.TimeOfDay.TotalSeconds > 0)
                result += $" - {Model.NextOrLastOccurrence.Value.ToShortTimeString()}";

            return result;
        }
    }


    protected override void OnInitialized()
    {
        date = Model.NextOrLastOccurrence?.Date;
        timeOfDay = Model.NextOrLastOccurrence;

        base.OnInitialized();
    }

    private void CreateNew()
    {
        newSubModel = new ToDoItem
            {
                ParentId = Model.Id,
                CategoryId = Model.CategoryId,
                ListId = ListId
            };
    }

    private void SetBezeichnungEditEnabled()
    {
        BezeichnungEditEnabled = Model.IsActive && !Hidden;
    }

    private async Task SwapDone()
    {
        if (Hidden || !Model.IsActive)
            return;

        if (Model.Done == null)
            Model.Done = DateTime.Now;
        else
            Model.Done = null;

        await ItemRepository.UpdateAndSaveAsync(Model);
        await OnDoneChanged.InvokeAsync(Model);

        if (User != default)
            await ListHubConnection!.SendAsync("BroadcastListChanged", ListId, User);
    }

    private async Task HandleBezeichnungChange(EditContext context)
    {
        var valid = context.Validate();
        if (valid)
        {
            await ItemRepository.UpdateAndSaveAsync(Model);
            BezeichnungEditEnabled = false;

            if (User != default)
                await ListHubConnection!.SendAsync("BroadcastListChanged", ListId, User);
        }
    }

    private async Task SwapActive(bool force = false)
    {
        if (Hidden)
            return;

        if (Model.Children?.Any() == true && !force)
        {
            PageModal.NotNull();

            PageModal!.Title = @<h5>Achtung!</h5>;
            PageModal.Body =@<div class="row align-items-center">
                <div class="col-3 text-center">
                    <span class="fa fa-warning text-warning fs-2" aria-hidden="true"></span>
                </div>

                <div class="col-9 text-start">Das Item "@(Model.Bezeichnung)" besitzt Unter-Items. Möchten Sie alle Items @(Model.IsActive ? "inaktiv" : "aktiv") setzen?</div>
            </div>
    ;

            PageModal.AcceptActionAsync = async () => await SwapActive(true);

            PageModal.Show();
            return;
        }
        else if (force == true)
            SetActiveStateForAll(Model, !Model.IsActive);
        else
            Model.IsActive = !Model.IsActive;

        await ItemRepository.UpdateAndSaveAsync(Model);

        StateHasChanged();
        await OnRemove.InvokeAsync(Model);

        if (User != default)
            await ListHubConnection!.SendAsync("BroadcastListChanged", ListId, User);
    }

    private void SetActiveStateForAll(ToDoItem item, bool isActive)
    {
        foreach (var childItem in item.Children ?? Enumerable.Empty<ToDoItem>())
            SetActiveStateForAll(childItem, isActive);

        item.IsActive = isActive;
    }

    private async Task HandleRemove(ToDoItem todoItem)
    {
        Model.Children.Remove(todoItem);

        StateHasChanged();
        await OnRemove.InvokeAsync(todoItem);
    }

    private async Task HandleNewChange(ToDoItem? item)
    {
        newSubModel = null;
        if (item != null)
        {
            Model.Children.Add(item);
            Model.Children = Model.Children
                .OrderBy(item => item.Done.HasValue)
                .ThenBy(item => item.Order)
                .ThenByDescending(item => item.NextOrLastOccurrence).ToList();
        }

        StateHasChanged();

        if (User != default)
            await ListHubConnection!.SendAsync("BroadcastListChanged", ListId, User);
    }

    private void HandleDragStart(ToDoItem dragItem)
    {
        if (Container != null)
            Container.DraggedToDoItem = dragItem;
    }

    private void HandleDragEnter()
    {
    }

    private async Task HandleDrop(ToDoItem dropItem)
    {
        var item = Container?.DraggedToDoItem;
        item.NotNull();

        if (dropItem == item || dropItem == item!.Parent)
            return;

        await HandleDraggedFrom(item.Parent, item);

        item.Parent = dropItem;
        item.ParentId = dropItem?.Id;
        await ItemRepository.UpdateAndSaveAsync(item);

        if (Container != null)
            Container.DraggedToDoItem = null;

        await HandleDraggedTo(item.Parent, item);
    }

    private async Task HandleDraggedFrom(ToDoItem source, ToDoItem item)
    {
        if (source != null)
            source.Children.Remove(item);
        else
            await OnDraggedFrom.InvokeAsync((source, item));

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleDraggedTo(ToDoItem destination, ToDoItem item)
    {
        if (destination != null && !destination.Children.Contains(item))
        {
            destination.Children.Add(item);
            destination.Children = Model.Children
               .OrderBy(item => item.Done.HasValue)
               .ThenBy(item => item.Order)
                   .ThenByDescending(item => item.NextOrLastOccurrence)
                   .Where(item => item.Parent == null).ToList();
        }
        else
            await OnDraggedTo.InvokeAsync((destination, item));

        await InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, object>? GetRowAttributes(bool noBackground = false)
    {
        if (Model.Category == null || Hidden)
            return null;

        var styleString = noBackground ? "" : $"background: {Model.Category!.RGB_A};";
        if (Model.Done.HasValue)
        {
            styleString = $"color: {UIColorService.GetDoneTextColor(Model.Category!.RGB_A)};";
            return new Dictionary<string, object>
            {
                { "style", styleString }
            };
        }

        styleString += $"color: {UIColorService.GetTextColor(Model.Category!.RGB_A)};";
        return new Dictionary<string, object>
        {
            { "style", styleString }
        };
    }

    private Dictionary<string, object>? GetPaddingLeft()
    {
        return new Dictionary<string, object>
        {
            { "style", $"padding-left: {8 + Level * 24}px;" }
        };
    }

    private Dictionary<string, object>? GetCheckWidthMargin()
    {
        return new Dictionary<string, object>
        {
            { "style", $"margin-left: 32px;" }
        };
    }

    private Dictionary<string, object>? GetLeftWidth()
    {
        return new Dictionary<string, object>
        {
            { "style", $"min-width: {Level * 24}px;" }
        };
    }
}