@page "/list/{ListId:guid}/item/new"

@using Framework.DomainModels.Base;
@using UI.Web.Areas.LiveData.Scheduling

<EditForm Model=Model OnSubmit=@SaveNewToDo>
    <DataAnnotationsValidator />

    <div class="row bg-opacity-25">
        <div class="d-flex col-8" @attributes=@GetMarginLeft()>
            <div class="col">
                <input type="text" @bind-value=Model.Bezeichnung id="bezeichnung" class="form-control" />
                <ValidationMessage For=@(() => Model.Bezeichnung) />
            </div>
        </div>

        <div class="col">
            <select @bind:get=@Model.CategoryId?.ToString() @bind:set=@((value) => SetCategoryId(value)) id="category" class="form-control">
                <option value="" @attributes=@SetSelected(Model.CategoryId, null)>Bitte auswählen...</option>
                @foreach (var category in Categories ?? Enumerable.Empty<Category>())
                {
                    <option value="@category.Id" @attributes=@SetSelected(Model.CategoryId, category.Id)>@category.Bezeichnung</option>
                }
            </select>
        </div>
    </div>

    <ScheduleEdit ItemId=Guid.Empty ListId=ListId @bind-Model=ScheduleEditModel></ScheduleEdit>

    <div class="row py-3">
        <div class="btn-group col-3" @attributes=@GetMarginLeft() role="group">
            <button type="button" @onclick=@Abort class="btn btn-outline-secondary">Abbrechen</button>
            <button type="submit" class="btn btn-outline-primary">Speichern</button>
        </div>
    </div>
</EditForm>

<div class="row">
    <div class="col-1">
        <IconSelect Selected="Privat" ElementsWithIcons=@Categories.Select(c => (Icon: c.Icon, Element: c.Bezeichnung))></IconSelect>
    </div>
</div>

@code {
    [Parameter]
    public Guid ListId { get; set; } = Guid.Empty;

    [Parameter]
    public ToDoItemDomainModel Model { get; set; } = new ToDoItemDomainModel();

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public EventCallback<ToDoItemDomainModel?> OnChange { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    [CascadingParameter]
    public List<Category> Categories { get; set; }

    private DateTime? timeOfDay { get; set; }
    private DateTime? date { get; set; }

    private ScheduleEditDomainModel ScheduleEditModel { get; set; } = new ScheduleEditDomainModel();

    protected override async Task OnParametersSetAsync()
    {
        if (User == null)
            return;
    }

    private void SetCategoryId(string value)
    {
        if (Guid.TryParse(value, out var catId))
            Model.CategoryId = catId;
        else
            Model.CategoryId = null;
    }

    private Dictionary<string, object>? SetSelected(Guid? categoryId, Guid? currentId)
    {
        if (!categoryId.Equals(currentId))
            return null;

        return new Dictionary<string, object>
        {
            { "selected", "selected" }
        };
    }

    private async Task Abort()
    {
        await OnChange.InvokeAsync(null);
    }

    private Dictionary<string, object>? GetMarginLeft()
    {
        if (Model.CategoryId == null)
            return null;

        return new Dictionary<string, object>
        {
            { "style", $"margin-left: {Level * 32}px" }
        };
    }

    private async Task SaveNewToDo(EditContext context)
    {
        var valid = context.Validate();
        if (valid)
        {
            Model.Schedules = ScheduleEditModel.Schedules;
            Model.Reminders = ScheduleEditModel.Reminders;
            if (Model.CategoryId != null)
                Model.Category = Categories.FirstOrDefault(c => c.Id == Model.CategoryId.Value);

            var dbModel = Mapper.Map<ToDoItem>(Model);
            await ItemRepository.AddAndSaveAsync(dbModel);
            Model.Id = dbModel.Id;

            await OnChange.InvokeAsync(Model);
        }
    }
}
