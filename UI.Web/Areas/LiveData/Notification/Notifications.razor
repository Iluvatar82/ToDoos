@page "/notifications"
@using Microsoft.AspNetCore.SignalR.Client

<h3>Benachrichtigungen</h3>

<table class="table table-hover table-light">
    <tbody>
        @foreach (var notification in NotificationModels ?? Enumerable.Empty<NotificationDomainModel>())
        {
            <tr class="@(notification.Read != null ? "opacity-50" : string.Empty)">
                <td class="align-middle text-center">
                    @if (notification.Read == null)
                    {
                        <span class="fa fa-plus opacity-25 read" aria-hidden="true" @onclick=@(async () => await MarkRead(@notification))></span>
                    }
                </td>

                <td class="align-middle text-end">
                    <div>@notification.Time.ToShortDateString()</div>
                    <div>@notification.Time.ToShortTimeString()</div>
                </td>

                <td>
                    <div class="w-100 p-3">
                        <div class="mb-3">@GetTitleFragment(notification.Title)</div>
                        <div>@GetContentFragment(notification.Message)</div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<NotificationDomainModel>? NotificationModels { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    [CascadingParameter]
    public HubConnection? UpdateHubConnection { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (User == null)
                return;

            await UpdateNotifications(true);
            if (UpdateHubConnection != null)
                UpdateHubConnection.On("UpdateNotifications", async () => await InvokeAsync(async () => await UpdateNotifications(false)));
        }
        catch(Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task UpdateNotifications(bool isStartup)
    {
        var userId = Guid.Parse(User!.Id);
        var newNotifications = ModelMapper.MapToList<NotificationDomainModel>(await NotificationRepository.GetAllAsync(n => n.UserId == userId)).OrderByDescending(n => n.Time).ToList();
        if (isStartup)
            NotificationModels = newNotifications;
        else if (NotificationModels != null)
        {
            foreach (var newNotification in newNotifications.Where(newN => !NotificationModels.Select(n => n.Id).Contains(newN.Id)))
                NotificationModels.Insert(0, newNotification);

            StateHasChanged();
        }
    }

    private async Task MarkRead(NotificationDomainModel notification)
    {
        try
        {
            notification.Read = DateTime.Now;
            await NotificationRepository.UpdateAndSaveAsync(ModelMapper.Map(notification));

            StateHasChanged();
            if (UpdateHubConnection != null)
                await UpdateHubConnection.SendAsync("UpdateNotifications", new List<string> { User!.Id });
        }
        catch(Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    private RenderFragment GetTitleFragment(string title)
    {
        RenderFragment content;
        if (title.Contains("Erinnerung"))
        {
            content = __builder => __builder.AddMarkupContent(0, $"<span class=\"fa fa-envelope me-2\"></span>");
            content += (RenderFragment)(__builder => __builder.AddMarkupContent(1, title));
        }
        else
            content = (RenderFragment)(__builder => __builder.AddMarkupContent(0, title));

        return content;
    }

    private RenderFragment GetContentFragment(string message) => __builder => __builder.AddMarkupContent(0, message);
}