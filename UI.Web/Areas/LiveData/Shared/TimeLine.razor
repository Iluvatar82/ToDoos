@using System.Diagnostics
@inject IJSRuntime JS

<div id="items_timeline" class="mb-3"></div>

@code {
    private List<(ToDoItemDomainModel Item, List<DateTime> Occurrences)> displayedItems { get; set; } = new List<(ToDoItemDomainModel Item, List<DateTime> Occurrences)>();
    private IJSObjectReference? JSScript { get; set; }
    private List<string> ItemIDs { get; set; } = new List<string>();

    [Parameter]
    public List<ToDoItemDomainModel> Items { get; set; } = new List<ToDoItemDomainModel>();

    [Parameter]
    public DateTime Start { get; set; } = DateTime.Now.AddDays(-7);

    [Parameter]
    public DateTime End { get; set; } = DateTime.Now.AddDays(7);

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            displayedItems = Items.Select(i => (Item: i, Occuccences: i.Occurrences(Start.Date, End.Date.AddDays(1)))).Where(io => io.Occuccences.Any()).ToList();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (JSScript == null)
            {
                JSScript = await JS.InvokeAsync<IJSObjectReference>("import", "./Areas/LiveData/Shared/TimeLine.razor.js");
                await JSScript.InvokeVoidAsync("initializeTimeline");
            }

            if (ItemIDs.SequenceEqual(GetItemIDs()))
                return;

            var allEvents = displayedItems.SelectMany(i => i.Occurrences.Where(o => o >= Start && o < End).Select(o =>
                new
                {
                    Id = i.Item.Id,
                    Bezeichnung = ItemContentRenderService.RenderContentWithoutHtml(i.Item.Bezeichnung),
                    Color = i.Item.Category!.RGB_A ?? "#000000",
                    Time = o.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'"),
                    TimeIsSet = o.TimeOfDay.TotalMicroseconds > 0
                }));

            await JSScript.InvokeVoidAsync("setTimelineEvents", allEvents);
            ItemIDs = GetItemIDs().ToList();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private IEnumerable<string> GetItemIDs() => Items.Select(i => i.Id.ToString()).OrderBy(id => id);
}