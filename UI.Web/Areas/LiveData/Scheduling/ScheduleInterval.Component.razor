@using  Common = global::ToDo.Data.Common;
@using ToDo.Data.Common.Enums;
<td class="align-top py-0 border-0" colspan="4">
    <table class="table mb-0">
        <tbody>
            <tr>
                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            von
                        </div>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col px-2">
                        <input type="date" class="form-control border-0" @bind-value=Start id="start" placeholder="Start" />
                        <label for="start">Start</label>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            bis
                        </div>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col pe-0">
                        <input type="date" class="form-control border-0" @bind-value=End id="end" placeholder="End" />
                        <label for="end">Ende</label>
                    </div>
                </td>
            </tr>

            <tr>
                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            im Intervall von
                        </div>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col">
                        <input type="number" class="form-control border-0" @bind-value=interval id="interval" placeholder="Interval in Days" />
                        <label for="interval">Interval</label>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                  <div class="form-floating col">
                        <select @bind:get=@((int)unit) @bind:set=@((int newUnit) => unit = (ScheduleTimeUnit)newUnit) class="form-control border-0" id="UnitSelect">
                            <option value="0">Stunden</option>
                            <option value="1">Tage</option>
                            <option value="2">Wochen</option>
                            <option value="3">Monate</option>
                            <option value="4">Jahre</option>
                        </select>

                        <label for="UnitSelect">Zeiteinheit</label>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</td>


@code {
    private Common.ScheduleInterval intervalValue = new Common.ScheduleInterval();
    private DateTime? start;
    private DateTime? end;

    private decimal interval { get => intervalValue?.Interval ?? 0; set { if (Model.Interval == value) return; intervalValue.Interval = value; ModelChanged.InvokeAsync((intervalValue, start, end)); } }
    private ScheduleTimeUnit unit { get => intervalValue?.Unit ?? ScheduleTimeUnit.Day; set { if (Model.Unit == value) return; intervalValue.Unit = value; ModelChanged.InvokeAsync((intervalValue, start, end)); } }

    [Parameter]
    public Common.ScheduleInterval Model { get => intervalValue; set { if (value.Interval == intervalValue.Interval) return; intervalValue = value; ModelChanged.InvokeAsync((intervalValue, start, end)); } }

    [Parameter]
    public DateTime? Start { get => start; set { if (start == value) return; start = value; ModelChanged.InvokeAsync((intervalValue, start, end)); } }

    [Parameter]
    public DateTime? End { get => end; set { if (end == value) return; end = value; ModelChanged.InvokeAsync((intervalValue, start, end)); } }

    [Parameter]
    public EventCallback<(Common.ScheduleInterval Definition, DateTime? Start, DateTime? End)> ModelChanged { get; set; }
}
