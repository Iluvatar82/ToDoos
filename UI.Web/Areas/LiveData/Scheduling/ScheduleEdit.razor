@page "/schedule/{ListId:guid}/{ItemId:guid}"

@using Core.Common;
@using Core.Validation
@using Framework.DomainModels.Base;
@using ToDo.Data.Common.Enums;
@using ToDo.Data.Common;
@using UI.Web.Areas.Identity.Pages.Account.Manage;

@inject ReminderService ReminderService

@if (ItemId != Guid.Empty)
{
    <h4>@Title<br>Scheduling bearbeiten</h4>
}

<div class="row mt-1">
    <div class="btn-group col-3" role="group">
        <button type="button" @onclick=@CreateNew class="btn btn-outline-primary">Schedule Hinzufügen</button>
    </div>
</div>

@if (Model.Schedules.Any())
{
    <table class="table table-bordered mb-0">
        <tbody>
            @for (int index = 0; index < Model.Schedules.Count; index++)
            {
                var currentIndex = index;
                var schedule = Model.Schedules[currentIndex];
                if (schedule == null)
                {
                    InvokeAsync(async () => await RemoveAt(currentIndex, true));
                }

                <tr>
                    <td class="align-top py-0" style="border-right-width: 0;">
                        <div class="form-floating col p-0">
                            <div class="form-control border-0 align-items-center d-flex">
                                Typ ist
                            </div>
                        </div>
                    </td>

                    <td class="align-top py-0 border-0">
                        <div class="form-floating col py-0 px-2">
                            <select @bind:get=@((int)schedule.Type) @bind:set=@((int newType) => ChangeTo(currentIndex, newType)) class="form-control border-0" id="TypeSelect">
                                <option value="0">Fixer Zeitpunkt</option>
                                <option value="1">Wochentage</option>
                                <option value="2">Intervall</option>
                            </select>

                            <label for="TypeSelect">Scheduletyp</label>
                        </div>
                    </td>

                    @switch (schedule.Type)
                    {
                        case ScheduleType.Fixed:
                            <ScheduleFixed_Component @bind-Model=@schedule.ScheduleDefinition.Fixed!.Date></ScheduleFixed_Component>
                            break;

                        case ScheduleType.Interval:
                            <ScheduleInterval_Component @bind-Model=@schedule.ScheduleDefinition!.Interval @bind-Start=@schedule.Start @bind-End=@schedule.End></ScheduleInterval_Component>
                            break;

                        case ScheduleType.WeekDays:
                            <ScheduleWeekdays_Component @bind-Model=@schedule.ScheduleDefinition.WeekDays @bind-Start=@schedule.Start @bind-End=@schedule.End></ScheduleWeekdays_Component>
                            break;
                    }

                    <td class="fixed-w fade-in-on-hover">
                        <span class="px-2 fa fa-xmark text-secondary opacity-25" aria-hidden="true" @onclick=@(() => RemoveAt(currentIndex, true))></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (ItemId != Guid.Empty)
{
    <h4>Erinngerungen bearbeiten</h4>
}

<div class="row mt-1">
    <div class="btn-group col-3" role="group">
        <button type="button" @onclick=@CreateNewReminder class="btn btn-outline-primary">Reminder Hinzufügen</button>
    </div>
</div>

@if (Model.Reminders.Any())
{
    <table class="table table-bordered mb-0">
        <tbody>
            @for (int index = 0; index < Model.Reminders.Count; index++)
            {
                var currentIndex = index;
                var reminder = Model.Reminders[currentIndex];
                if (reminder.ReminderDefinition == null)
                {
                    InvokeAsync(async () => await RemoveAt(currentIndex, false));
                }

                <tr>
                    <td class="align-top py-0" style="border-right-width: 0;">
                        <div class="form-floating col p-0">
                            <div class="form-control border-0 align-items-center d-flex">
                                Erinnern
                            </div>
                        </div>
                    </td>

                    <td class="align-top py-0 border-0">
                        <div class="form-floating col p-0">
                            <input type="number" class="form-control border-0" @bind:get=@reminder.ReminderDefinition!.Value @bind:set=@((decimal newValue) => SetReminderValue(currentIndex, newValue)) id="value" />
                            <label for="value">Wert</label>
                        </div>
                    </td>

                    <td class="align-top py-0 border-0">
                        <div class="form-floating col py-0 px-2">
                            <select @bind:get=@((int)reminder.ReminderDefinition.Unit) @bind:set=@((int unit) => SetReminderUnit(currentIndex, unit)) class="form-control border-0" id="TypeSelect">
                                <option value="0">Minuten</option>
                                <option value="1">Stunden</option>
                                <option value="2">Tage</option>
                            </select>

                            <label for="TypeSelect">Zeiteinheit</label>
                        </div>
                    </td>

                    <td class="align-top py-0 border-right-0 border-0">
                        <div class="form-floating col p-0">
                            <div class="form-control border-0 align-items-center d-flex">
                                vor Schedule
                            </div>
                        </div>
                    </td>

                    <td class="fixed-w fade-in-on-hover">
                        <span class="px-2 fa fa-xmark text-secondary opacity-25" aria-hidden="true" @onclick=@(() => RemoveAt(currentIndex, false))></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (ItemId != Guid.Empty)
{
    <div class="row mt-3">
        <div class="btn-group col-3" role="group">
            <button type="button" @onclick="NavigateBack" class="btn btn-outline-secondary">Zurück</button>
            <button type="button" @onclick="Save" class="btn btn-primary">Speichern</button>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    public IdentityUser? User { get; set; }

    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public Guid ItemId { get; set; }

    [Parameter]
    public ScheduleEditDomainModel Model { get; set; } = new ScheduleEditDomainModel();
    private ScheduleEditDomainModel EntitiesToRemove { get; set; } = new ScheduleEditDomainModel();

    [Parameter]
    public EventCallback<ScheduleEditDomainModel> ModelChanged { get; set; }

    private string Title { get; set; } = "Keine Beschreibung";
    private decimal DefaultReminderTimeInMinutes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (ItemId != Guid.Empty)
        {
            Title = (await ItemRepository.GetAsync(ItemId))?.Bezeichnung ?? Title;

            Model.Schedules = ModelMapper.MapToList<ScheduleDomainModel>(await ScheduleRepository.GetAllAsync(s => s.ToDoItemId == ItemId));
            Model.Reminders = ModelMapper.MapToList<ScheduleReminderDomainModel>(await ScheduleReminderRepository.GetAllAsync(r => r.ToDoItemId == ItemId));
        }

        if (User != null)
        {
            var reminderValueString = (await SettingRepository.GetAllSettingsAsync(Guid.Parse(User.Id))).FirstOrDefault(s => s.Key == Settings.ReminderValue)?.Value;
            decimal reminderValue = 30m;
            if (!string.IsNullOrWhiteSpace(reminderValueString))
                decimal.TryParse(reminderValueString, out reminderValue);

            DefaultReminderTimeInMinutes = reminderValue;
        }

        if (!Model.Schedules.Any() && !Model.Reminders.Any())
            await CreateNewReminder();
    }

    private void ChangeTo(int index, int newType)
    {
        switch (newType)
        {
            case 0:
                Model.Schedules[index].ScheduleDefinition = (ScheduleDefinition)ModelMapper.Map(ScheduleFixed.Default);

                break;

            case 1:
                Model.Schedules[index].ScheduleDefinition = (ScheduleDefinition)ModelMapper.Map(ScheduleWeekdays.Default);

                break;

            case 2:
                Model.Schedules[index].ScheduleDefinition = (ScheduleDefinition)ModelMapper.Map(ScheduleInterval.Default);

                break;
        }
    }

    private async Task CreateNew()
    {
        var newSchedule = new ScheduleDomainModel() { ToDoItemId = ItemId, ScheduleDefinition = new ScheduleDefinition() { Fixed = DateTime.Today.AddDays(1) } };
        Model.Schedules.Add(newSchedule);

        await ModelChanged.InvokeAsync(Model);
    }

    private async Task CreateNewReminder()
    {
        var newReminder = new ScheduleReminderDomainModel() { ToDoItemId = ItemId, ReminderDefinition = new ReminderDefinition() { Value = DefaultReminderTimeInMinutes, Unit = SettingsModel.DefaultReminderUnit } };
        Model.Reminders.Add(newReminder);

        await ModelChanged.InvokeAsync(Model);
    }

    private async Task RemoveAt(int index, bool schedules = true)
    {
        if (schedules)
        {
            if (Model.Schedules[index].Id != Guid.Empty)
                EntitiesToRemove.Schedules.Add(Model.Schedules[index]);

            Model.Schedules.RemoveAt(index);
        }
        else
        { 
            if (Model.Reminders[index].Id != Guid.Empty)
                EntitiesToRemove.Reminders.Add(Model.Reminders[index]);

            Model.Reminders.RemoveAt(index);
        }

        await ModelChanged.InvokeAsync(Model);
    }

    private async Task SetReminderValue(int index, decimal value)
    {
        Model.Reminders[index].ReminderDefinition.Value = value;

        await ModelChanged.InvokeAsync(Model);
    }

    private async Task SetReminderUnit(int index, int unit)
    {
        Model.Reminders[index].ReminderDefinition.Unit = (ScheduleTimeUnit)unit;

        await ModelChanged.InvokeAsync(Model);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"/list/{ListId}");
    }

    private async Task Save()
    {
        if (EntitiesToRemove.Schedules.Any())
            await ItemRepository.RemoveAndSaveAsync(ModelMapper.MapToArray(EntitiesToRemove.Schedules));

        if (EntitiesToRemove.Reminders.Any())
            await ItemRepository.RemoveAndSaveAsync(ModelMapper.MapToArray(EntitiesToRemove.Reminders));

        await ItemRepository.AddOrUpdateAndSaveAsync(ModelMapper.MapToArray(Model.Schedules));
        await ItemRepository.AddOrUpdateAndSaveAsync(ModelMapper.MapToArray(Model.Reminders));

        await ReminderService.UpdateReminders(ItemId);
 
        NavigateBack();
    }
}