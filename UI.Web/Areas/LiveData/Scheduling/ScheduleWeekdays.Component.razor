@using System.Globalization;
@using Framework.DomainModels.Common

<td class="align-top py-0 border-0" colspan="4">
    <table class="table mb-0">
        <tbody>
            <tr>
                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            von
                        </div>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col px-2">
                        <input type="date" class="form-control border-0" @bind-value=Start id="start" placeholder="Start" />
                        <label for="start">Start</label>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            bis
                        </div>
                    </div>
                </td>

                <td class="align-top py-0 border-0">
                    <div class="form-floating col pe-0">
                        <input type="date" class="form-control border-0" @bind-value=End id="end" placeholder="End" />
                        <label for="end">Ende</label>
                    </div>
                </td>
             </tr>

             <tr>
                <td class="align-top py-0 border-0">
                    <div class="form-floating col p-0" b-6yl1ru612t="">
                        <div b-6yl1ru612t="" class="form-control border-0 align-items-center d-flex">
                            an den Wochentagen
                        </div>
                    </div>
                </td>
            </tr>

            <tr>
                @for (var dayNumber = 0; dayNumber < 4; dayNumber++)
                {
                    var currentNumber = dayNumber;
                    <td class="align-top py-0 border-0">
                        <div class="form-check px-3 ms-3 pt-2 col">
                            <input class="form-check-input" type="checkbox" value="" id="checkbox.@GetWochentag(dayNumber).ToLower()" @attributes=@GetCheckboxAttributes(Model.Days[dayNumber]) @oninput=@((args) => CheckboxChanged(args, currentNumber))>
                            <label class="form-check-label" for="checkbox.@GetWochentag(dayNumber).ToLower()">
                                @GetWochentag(dayNumber)
                            </label>
                        </div>
                    </td>
                }
            </tr>

            <tr>
                @for (var dayNumber = 4; dayNumber < 7; dayNumber++)
                {
                    var currentNumber = dayNumber;
                    <td class="align-top py-0 border-0">
                        <div class="form-check px-3 ms-3 pt-2 col">
                            <input class="form-check-input" type="checkbox" value="" id="checkbox.@GetWochentag(dayNumber).ToLower()" @attributes=@GetCheckboxAttributes(Model.Days[dayNumber]) @oninput=@((args) => CheckboxChanged(args, currentNumber))>
                            <label class="form-check-label" for="checkbox.@GetWochentag(dayNumber).ToLower()">
                                @GetWochentag(dayNumber)
                            </label>
                        </div>
                    </td>
                }

                <td class="align-top py-0 border-0">
                    <div class="form-floating col pe-0">
                        <input type="time" class="form-control border-0" @bind-value=time id="time" />
                        <label for="time">Uhrzeit</label>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</td>

@code {
    private ScheduleWeekdays weekdaysValue = new ScheduleWeekdays();
    private DateTime? start;
    private DateTime? end;

    private TimeOnly time { get => weekdaysValue.Time; set { weekdaysValue.Time = value; ModelChanged.InvokeAsync(weekdaysValue); } }

    [Parameter]
    public DateTime? Start { get => start; set { if (start == value) return; start = value; StartChanged.InvokeAsync(value); } }

    [Parameter]
    public DateTime? End { get => end; set { if (end == value) return; end = value; EndChanged.InvokeAsync(value); } }

    [Parameter]
    public ScheduleWeekdays Model { get => weekdaysValue; set { if (value.ToString() == weekdaysValue.ToString() || value == null) return; weekdaysValue = value; ModelChanged.InvokeAsync(value); } }

    [Parameter]
    public EventCallback<ScheduleWeekdays> ModelChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime?> StartChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime?> EndChanged { get; set; }


    private Dictionary<string, object>? GetCheckboxAttributes(bool isActive)
    {
        if (!isActive)
            return new Dictionary<string, object>();

        return new Dictionary<string, object>
        {
            { "checked", string.Empty }
        };
    }

    private string GetWochentag(int dayNumber) => new CultureInfo("de-AT").DateTimeFormat.GetDayName((DayOfWeek)dayNumber);

    private async Task CheckboxChanged(ChangeEventArgs e, int index)
    {
        var value = e.Value as bool?;
        weekdaysValue.Days[index] = value ?? false;
        
        await ModelChanged.InvokeAsync(weekdaysValue);
    }
}
