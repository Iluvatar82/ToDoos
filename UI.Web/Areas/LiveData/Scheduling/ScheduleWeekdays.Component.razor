@using  Common = global::ToDo.Data.Common;
@using System.Globalization;

<div class="py-0 align-items-center">
    <div class="row px-2">
        <div class="form-floating col px-2">
            <input type="date" class="form-control" @bind-value=Start id="start" placeholder="Start" />
            <label for="start">Start</label>
        </div>

        <div class="form-floating col pe-0">
            <input type="date" class="form-control" @bind-value=End id="end" placeholder="End" />
            <label for="end">Ende</label>
        </div>

        <div class="form-floating col pe-0"></div>
    </div>

    <div class="row mx-1 px-2 py-1 border border-1 rounded-2">
        @for (var dayNumber = 0; dayNumber < 7; dayNumber++)
        {
            var currentNumber = dayNumber;
            <div class="form-check px-3 ms-3 pt-2 col">
                <input class="form-check-input" type="checkbox" value="" id="checkbox.@GetWochentag(dayNumber).ToLower()" @attributes=@GetCheckboxAttributes(Model.Days[dayNumber]) @oninput=@((args) => CheckboxChanged(args, currentNumber))>
                <label class="form-check-label" for="checkbox.@GetWochentag(dayNumber).ToLower()">
                    @GetWochentag(dayNumber)
                </label>
            </div>
        }

        <input type="time" class="form-control col" @bind-value=time />
    </div>
</div>

@code {
    private Common.ScheduleWeekdays weekdaysValue;
    private DateTime? start;
    private DateTime? end;

    private TimeOnly time { get => weekdaysValue.Time; set { weekdaysValue.Time = value; ModelChanged.InvokeAsync((weekdaysValue, start, end)); } }

    [Parameter]
    public DateTime? Start { get => start; set { if (start == value) return; start = value; ModelChanged.InvokeAsync((weekdaysValue, start, end)); } }

    [Parameter]
    public DateTime? End { get => end; set { if (end == value) return; end = value; ModelChanged.InvokeAsync((weekdaysValue, start, end)); } }

    [Parameter]
    public Common.ScheduleWeekdays Model { get => weekdaysValue; set { if (value.ToString() == weekdaysValue?.ToString() || value == null) return; weekdaysValue = value; ModelChanged.InvokeAsync((weekdaysValue, start, end)); } }

    [Parameter]
    public EventCallback<(Common.ScheduleWeekdays Definition, DateTime? Start, DateTime? End)> ModelChanged { get; set; }


    private Dictionary<string, object>? GetCheckboxAttributes(bool isActive)
    {
        if (!isActive)
            return new Dictionary<string, object>();

        return new Dictionary<string, object>
        {
            { "checked", string.Empty }
        };
    }

    private string GetWochentag(int dayNumber) => new CultureInfo("de-AT").DateTimeFormat.GetDayName((DayOfWeek)dayNumber);

    private async Task CheckboxChanged(ChangeEventArgs e, int index)
    {
        var value = e.Value as bool?;
        weekdaysValue.Days[index] = value ?? false;
        
        await ModelChanged.InvokeAsync((weekdaysValue, start, end));
    }
}
