@page "/list/{ListId:guid}"

@using System.Security.Claims;
@using Core.Common;
@using Framework.Converter;
@using Core.Validation;
@using Framework.Services;
@using Framework.Extensions;
@using Microsoft.AspNetCore.SignalR.Client;
@using UI.Web.Areas.LiveData.Item
@using UI.Web.Hubs;
@using UI.Web.Services;

@inject IJSRuntime JS
@inject ToastNotificationService ToastService
@inject EmailService EmailService;
@inject ItemDragDropService ItemDragDropService;
@inject ItemHandlerService ItemHandlerService;

<AuthorizeView>
    <NotAuthorized>
        <h4>Bitte einloggen!</h4>
        <div>
            <a href=@(NavigationManager.BaseUri + "Identity/Account/Login")>Login Page</a>
        </div>
    </NotAuthorized>

    <Authorized>
        <h4>@listEntity?.Name
            <span @onclick=@(() =>NavigationManager.NavigateTo(NavigationManager.BaseUri + $"list/edit/{ListId}"))><i class="fa-solid fa-gears small ms-2"></i></span>
        </h4>

        <div class="d-flex mb-3">
            <div class="col p-3 border border-1 bg-light">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="showInactiveControl"  @onchange=@SwitchActiveInactiveView>
                    <label class="form-check-label" for="showInactiveControl">Zeige bereits gelöschte/entfernte ToDo's</label>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="btn-group col-3" role="group">
                <button type="button" @onclick="NavigateBack" class="btn btn-outline-secondary">Zurück</button>
                <button @onclick=@(() => newItemModel = ToDoItemDomainModel.Create(null, null, ListId)) class="btn btn-outline-primary" disabled=@showInactive>Hinzufügen</button>
            </div>
        </div>

@*         <UI.Web.Areas.LiveData.Shared.TimeLine></UI.Web.Areas.LiveData.Shared.TimeLine>*@

        <CascadingValue Value=@Categories>
            @if (newItemModel != null)
            {
                <div class="row mt-2">
                    <ItemNewComponent Model=newItemModel OnChange=@(async item => topLevelItems = await ItemHandlerService.HandleNewChange(topLevelItems, item, UpdateNotifyAction))></ItemNewComponent>
                </div>
            }

            <CascadingValue Value=@this>
                @if (topLevelItems.Any() && !showTwoColumns)
                {
                    <div class="table-responsive">
                        <table class="table">
                            <tbody>
                                @foreach (var item in topLevelItems)
                                {
                                    var index = topLevelItems.IndexOf(item);
                                    <ItemComponent Model=item Level=0 InactiveMode=@showInactive ListId=ListId TopLevel=@topLevelItems
                                        OnBezeichnungEditEnabled=@HandleBezeichnungEnabled
                                        OnRemove=@(async item => await ItemHandlerService.HandleRemove(topLevelItems, item, null, UpdateNotifyAction))
                                        OnDraggedFrom=@(async info => { topLevelItems = ItemDragDropService.HandleDraggedFrom(topLevelItems, info.Source, info.Item); await InvokeAsync(StateHasChanged); }) 
                                        OnDraggedTo=@(async info => { topLevelItems = ItemDragDropService.HandleDraggedTo(topLevelItems, info.Destination, info.Item); await InvokeAsync(StateHasChanged); })
                                        OnDoneChanged=@StateHasChanged 
                                        OnReferenced=@(reference => topLevelReferenceList.Add(reference))
                                        OnOrderChanged=@(async (ci) => await ItemHandlerService.ChangeChildOrder(topLevelItems, ci.Item, ci.Movement, StateHasChanged))
                                        OnOrderRemoved=@(async (item) => await ItemHandlerService.RemoveOrder(topLevelItems, item, StateHasChanged))></ItemComponent>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (topLevelItems.Any())
                {
                    <div class="row" data-masonry='{ "percentPosition": true }'>
                        @foreach (var item in topLevelItems)
                        {
                            var index = topLevelItems.IndexOf(item);
                            <div class="col-sm-6">
                                <div class="card">
                                    <div class="p-1">
                                        <table class="table mb-0">
                                            <tbody>
                                                <ItemComponent Model=item Level=0 InactiveMode=@showInactive ListId=ListId TopLevel=@topLevelItems
                                                    OnBezeichnungEditEnabled=@HandleBezeichnungEnabled 
                                                    OnRemove=@(async item => await ItemHandlerService.HandleRemove(topLevelItems, item, null, UpdateNotifyAction))
                                                    OnDraggedFrom=@(async info => { topLevelItems = ItemDragDropService.HandleDraggedFrom(topLevelItems, info.Source, info.Item); await InvokeAsync(StateHasChanged); }) 
                                                    OnDraggedTo=@(async info => { topLevelItems = ItemDragDropService.HandleDraggedTo(topLevelItems, info.Destination, info.Item); await InvokeAsync(StateHasChanged); })
                                                    OnDoneChanged=@StateHasChanged 
                                                    OnReferenced=@(reference => topLevelReferenceList.Add(reference))
                                                    OnOrderChanged=@(async (ci) => await ItemHandlerService.ChangeChildOrder(topLevelItems, ci.Item, ci.Movement, StateHasChanged))
                                                    OnOrderRemoved=@(async (item) => await ItemHandlerService.RemoveOrder(topLevelItems, item, StateHasChanged))></ItemComponent>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <script src="https://cdn.jsdelivr.net/npm/masonry-layout@4.2.2/dist/masonry.pkgd.min.js" integrity="sha384-GNFwBvfVxBkLMJpYMOABq3c+d3KnQxudP/mGPkzpZSTYykLBNsZEnG2D9G/X/+7D" crossorigin="anonymous" async></script>
                }
            </CascadingValue>
        </CascadingValue>
    </Authorized>
</AuthorizeView>

<script>
    window.topLevelSelector = 'table tbody tr.top';
    window.currentElement = null;
    window.currentIndex = 0;
    window.allowKeyboardNavigation = true;

    document.onkeypress = function (e) {
        var isNewItemAdding = document.querySelectorAll('.newItem').length > 0;
        if (e.key == "j" && allowKeyboardNavigation && !isNewItemAdding) {
            let topLevelElements = document.querySelectorAll(window.topLevelSelector);
            currentIndex++;
            if (currentIndex >= topLevelElements.length)
                currentIndex = 0;

            if (currentElement != null)
                currentElement.classList.remove('active');

            currentElement = topLevelElements[currentIndex];
            currentElement.classList.add('active');

            window.scrollTo({
                    behavior: 'smooth',
                    top:
                        currentElement.getBoundingClientRect().top -
                        document.body.getBoundingClientRect().top -
                        document.querySelectorAll('.top-row')[0].getBoundingClientRect().height,
                });
        }
        else if (e.key == "k" && allowKeyboardNavigation && !isNewItemAdding) {
            let topLevelElements = document.querySelectorAll(window.topLevelSelector);
            currentIndex--;
            if (currentIndex < 0)
                currentIndex = topLevelElements.length - 1;

            if (currentElement != null)
                currentElement.classList.remove('active');

            currentElement = topLevelElements[currentIndex];
            currentElement.classList.add('active');

            window.scrollTo({
                behavior: 'smooth',
                top:
                    currentElement.getBoundingClientRect().top -
                    document.body.getBoundingClientRect().top -
                    document.querySelectorAll('.top-row')[0].getBoundingClientRect().height,
            });
        }
    };


    allowKeyNavigation = function (value) {
        allowKeyboardNavigation = value;
        if (value == false && currentElement != null) { 
            currentElement.classList.remove('active');
            currentElement = null;
        }
    };
</script>

@code {
    private ToDoItemDomainModel? newItemModel = null;
    private List<ToDoItemDomainModel> topLevelItems { get; set; } = new List<ToDoItemDomainModel>();
    private bool showInactive { get; set; }
    private ToDoListDomainModel? listEntity { get; set; }
    private bool showTwoColumns { get; set; } = false;
    private Action UpdateNotifyAction => async () =>
    {
        newItemModel = null;
        StateHasChanged();
        if (User != default && ListHubConnection!.State == HubConnectionState.Connected && listEntity?.IsUserList == false)
            await ListHubConnection!.SendAsync("BroadcastListChanged", ListId, User);
    };

    private List<ElementReference> topLevelReferenceList { get; set; } = new List<ElementReference>();
    private ElementReference currentTopLevelReference { get; set; }

    public ToDoItemDomainModel? DraggedToDoItem { get; set; }

    [Parameter]
    public Guid ListId { get; set; }
    private Guid previousListId { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    [CascadingParameter]
    public HubConnection? ListHubConnection { get; set; }

    [CascadingParameter]
    public List<CategoryDomainModel> Categories { get; set; } = new List<CategoryDomainModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListHubConnection?.On<string>("JoinedList", async (username) =>
            {
                await ToastService.SendAsync("Beigetreten", $"{username} hat die Liste geöffnet!", Framework.Services.Base.MessageType.Info);
                await InvokeAsync(StateHasChanged);
            });

            ListHubConnection?.On<string>("UpdateList", async (username) =>
            {
                await ToastService.SendAsync("Aktualisiert", $"{username} hat die Liste aktualisiert!.{Environment.NewLine}Lade Änderungen...", Framework.Services.Base.MessageType.Info);
                await InvokeAsync(async () =>
                {
                    await RetrieveItems();
                    StateHasChanged();
                });
            });

            ListHubConnection?.On<string>("LeftList", async (username) =>
            {
                await ToastService.SendAsync("Verlassen", $"{username} hat die Liste geschlossen!", Framework.Services.Base.MessageType.Info);
                await InvokeAsync(StateHasChanged);
            });

            if (ListId == default)
            {
                var _currentUser = (await AuthenticationProvider.GetAuthenticationStateAsync()).User;
                if (_currentUser?.Claims.Any() != true)
                    return;

                ListId = Guid.Parse(_currentUser.Claims!.First(c => c.Type.Contains("nameidentifier")).Value);
            }
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (previousListId == ListId)
                return;

            if (User != default)
            {
                var userId = Guid.Parse(User.Id);
                var twoColumnSetting = await SettingRepository.GetSettingAsync(userId, Settings.TwoColumns);
                if (twoColumnSetting != null)
                    showTwoColumns = twoColumnSetting.Value.GetBool();
            }

            await RetrieveItems();
            await base.OnParametersSetAsync();

            listEntity = (ToDoListDomainModel)ModelMapper.Map(await UserRepository.GetListAsync(ListId));
            if (!listEntity.IsUserList && ListHubConnection != null && User != default)
                await ListHubConnection.SendAsync("JoinedGroupList", ListId, User);

            if (!listEntity.IsUserList)
                Categories = ModelMapper.MapToList<CategoryDomainModel>(await CategoryRepository.GetAllAsync(c => c.ListId == ListId));
            else if (User != default)
                Categories = ModelMapper.MapToList<CategoryDomainModel>(await CategoryRepository.GetAllAsync(c => c.UserId == Guid.Parse(User.Id)));
            else
                Categories = new List<CategoryDomainModel>();

            await ToastService.SendAsync("Liste geöffnet", $"Liste <b>{listEntity.Name}</b> wurde geöffnet!", Framework.Services.Base.MessageType.Info);

            previousListId = ListId;
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    private async Task SwitchActiveInactiveView()
    {
        try
        {
            showInactive = !showInactive;

            await RetrieveItems();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    private async Task RetrieveItems()
    {
        if (ListId == default)
        {
            topLevelItems = new List<ToDoItemDomainModel>();
            return;
        }

        if (!showInactive)
            topLevelItems = ModelMapper.MapToList<ToDoItemDomainModel>(await ItemRepository.GetAllItemsCompleteAsync(ListId, showInactive)).Where(item => item.Parent == null).ToList();
        else
        {
            var allItems = ModelMapper.MapToList<ToDoItemDomainModel>(await ItemRepository.GetAllItemsCompleteAsync(ListId, showInactive));
            topLevelItems = BuildInactiveItemsFromAll(allItems);
        }

        topLevelItems = ItemHandlerService.Order(topLevelItems);
        topLevelReferenceList = new List<ElementReference>();
    }

    private List<ToDoItemDomainModel> BuildInactiveItemsFromAll(List<ToDoItemDomainModel> allItems)
    {
        var allInactiveItems = allItems.Where(item => item.InactiveSince.HasValue);
        var result = new HashSet<ToDoItemDomainModel>();

        foreach (var inactiveItem in allInactiveItems)
        {
            var currentItem = inactiveItem;
            while (currentItem.Parent != null)
            {
                currentItem = currentItem.Parent;
                if (currentItem.VisuallyDeactivated == true)
                    break;

                if (!currentItem.InactiveSince.HasValue)
                    currentItem.VisuallyDeactivated = true;
            }

            if (!result.Contains(currentItem))
                result.Add(currentItem);
        }

        return result.ToList();
    }

    private void NavigateBack()
    {
        try
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri);
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }

    private ItemComponent? currentEditItemComponent = null;
    private async Task HandleBezeichnungEnabled(ItemComponent? component)
    {
        try
        {
            if (currentEditItemComponent != null)
                currentEditItemComponent.BezeichnungEditEnabled = false;

            currentEditItemComponent = component;
            await JS.InvokeVoidAsync("allowKeyNavigation", component == null);
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(this.GetType()).LogError(ex, ex.Message);
        }
    }
}
