@using System.Security.Claims;
@using Core.Validation;
@using UI.Web.Data.Extensions;
        @using UI.Web.Areas.LiveData.Shared

<AuthorizeView>
    <NotAuthorized>
        <h4>Bitte einloggen!</h4>
        <div>
            <a href=@(NavigationManager.BaseUri + "Identity/Account/Login")>Login Page</a>
        </div>
    </NotAuthorized>

    <Authorized>
        <h3>ToDo Liste auswählen</h3>

        @if (ItemsWithSchedules.Any())
        {
            <TimeLine Items=@ItemsWithSchedules></TimeLine>
        }

        <table class="table @(IsDark ? "table-dark" : "table-light") small table-hover table-bordered">
            <tbody>
                @{
                    var textColorClass = IsDark ? "text-white" : "text-black";
                }
                @foreach (var listEntry in MyLists)
                {
                    <tr>
                        <td>
                            <div>
                                <NavLink class="nav-link" href=@(NavigationManager.BaseUri + @listEntry.GetListUrl())>
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <span class="fa fa-@listEntry.GetToDoListTypeIcon() @textColorClass" aria-hidden="true"></span>
                                            <span class="fw-bold @textColorClass ms-2">@listEntry.Name</span>
                                        </div>

                                        <span id="removeListButton" class="text-secondary align-self-center me-2" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick=@(async () => await RemoveList(@listEntry))><i class="fa fa-xmark" aria-hidden="true"></i></span>
                                    </div>
                                </NavLink>
                            </div>
                        </td>
                    </tr>
                }

                <tr>
                    <td>
                        <div>
                            <div class="d-flex justify-content-between">
                                <NavLink class="nav-link" href=@(NavigationManager.BaseUri + "list/new")>
                                    <div>
                                        <span class="fa fa-plus @textColorClass" aria-hidden="true"></span>
                                        <span class="@textColorClass ms-2"><em>Neue Liste anlegen</em></span>
                                    </div>
                                </NavLink>
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </Authorized>
</AuthorizeView>


@code {
    private List<ToDoListDomainModel> MyLists { get; set; } = new List<ToDoListDomainModel>();
    private List<ToDoItemDomainModel> ItemsWithSchedules { get; set; } = new List<ToDoItemDomainModel>();
    private bool IsDark { get; set; }

    [CascadingParameter]
    public Modal? PageModal { get; set; }

    [CascadingParameter]
    public IdentityUser? User { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (User == default)
                return;

            var guidId = Guid.Parse(User.Id);
            MyLists = ModelMapper.MapToList<ToDoListDomainModel>(await UserRepository.GetAllListsAsync(guidId));

            var myListIDs = MyLists.Select(l => l.Id);
            ItemsWithSchedules = ModelMapper.MapToList<ToDoItemDomainModel>(await ItemRepository.GetAllItemsCompleteAsync(i => myListIDs.Contains(i.ListId) && i.InactiveSince == null && i.Schedules.Any()));
            
            EventHandlerService.AddHandler("ThemeChanged", "ListIndexThemeChangedHandler", async (args) => await HandleThemeChange(args));
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }

        await base.OnParametersSetAsync();
    }

    private async Task HandleThemeChange(object[] arguments)
    {
        if (arguments.Length != 1)
            return;

        if (arguments[0] is bool isDark && isDark != IsDark)
        {
            IsDark = isDark;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RemoveList(ToDoListDomainModel list, bool validated = false)
    {
        try
        {
            var flatItems = (await ItemRepository.GetAllItemsCompleteAsync(list.Id, false)).ToArray();
            if (flatItems.Any() && !validated)
            {
                PageModal.NotNull();

                PageModal!.Title = @<h5>Achtung!</h5>;
                PageModal.Body =@<div class="row align-items-center">
                    <div class="col-3 text-center">
                        <span class="fa fa-warning text-warning fs-2" aria-hidden="true"></span>
                    </div>

                    <div class="col-9 text-start"><span>Die Liste "@list.Name" besitzt ToDo-Items. Möchten Sie alle @flatItems.Length Items löschen?</span></div>
                </div>;

                PageModal.AcceptActionAsync = () => RemoveList(list, true);

                PageModal.Show();
                return;
            }

            await ItemRepository.RemoveAndSaveAsync(flatItems);
            await UserRepository.RemoveAndSaveAsync(ModelMapper.Map(list));

            NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
        }
        catch (Exception ex)
        {
            LoggerFactory.CreateLogger(GetType()).LogError(ex, ex.Message);
        }
    }
}
